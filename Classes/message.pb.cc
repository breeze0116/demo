// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bullfight {

namespace {

const ::google::protobuf::Descriptor* LoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfoMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfoMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitRoomRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitRoomRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomInfoMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomInfoMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomListInfoMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomListInfoMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitRoomMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitRoomMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefreshRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefreshRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefreshBackMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefreshBackMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterRoomRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterRoomRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerInfoMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfoMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PokerMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PokerMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomBetEndMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomBetEndMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* BankerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BankerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomBankerListMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomBankerListMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomBankerListMsg_Banker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomBankerListMsg_Banker_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomStatusMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomStatusMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomBetMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomBetMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomBetTotalMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomBetTotalMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomStatusTimeCfgRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomStatusTimeCfgRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomStatusTimeCfgMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomStatusTimeCfgMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExitRoomMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExitRoomMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  LoginRequest_descriptor_ = file->message_type(0);
  static const int LoginRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, passwd_),
  };
  LoginRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRequest_descriptor_,
      LoginRequest::default_instance_,
      LoginRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRequest));
  UserInfoMsg_descriptor_ = file->message_type(1);
  static const int UserInfoMsg_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoMsg, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoMsg, userlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoMsg, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoMsg, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoMsg, diamonds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoMsg, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoMsg, userfacetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoMsg, userglamours_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoMsg, userbankmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoMsg, userbattlelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoMsg, currentexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoMsg, sex_),
  };
  UserInfoMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfoMsg_descriptor_,
      UserInfoMsg::default_instance_,
      UserInfoMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfoMsg));
  LoginMsg_descriptor_ = file->message_type(2);
  static const int LoginMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginMsg, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginMsg, userinfo_),
  };
  LoginMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginMsg_descriptor_,
      LoginMsg::default_instance_,
      LoginMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginMsg));
  InitRoomRequest_descriptor_ = file->message_type(3);
  static const int InitRoomRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRoomRequest, userid_),
  };
  InitRoomRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitRoomRequest_descriptor_,
      InitRoomRequest::default_instance_,
      InitRoomRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRoomRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRoomRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitRoomRequest));
  RoomInfoMsg_descriptor_ = file->message_type(4);
  static const int RoomInfoMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfoMsg, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfoMsg, roompnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfoMsg, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfoMsg, roomlimittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfoMsg, roomdescribtion_),
  };
  RoomInfoMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomInfoMsg_descriptor_,
      RoomInfoMsg::default_instance_,
      RoomInfoMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfoMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfoMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomInfoMsg));
  RoomListInfoMsg_descriptor_ = file->message_type(5);
  static const int RoomListInfoMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListInfoMsg, roominfo_),
  };
  RoomListInfoMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomListInfoMsg_descriptor_,
      RoomListInfoMsg::default_instance_,
      RoomListInfoMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListInfoMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomListInfoMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomListInfoMsg));
  InitRoomMsg_descriptor_ = file->message_type(6);
  static const int InitRoomMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRoomMsg, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRoomMsg, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRoomMsg, roomlistinfo_),
  };
  InitRoomMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitRoomMsg_descriptor_,
      InitRoomMsg::default_instance_,
      InitRoomMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRoomMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRoomMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitRoomMsg));
  RegisterRequest_descriptor_ = file->message_type(7);
  static const int RegisterRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, passwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, nickname_),
  };
  RegisterRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterRequest_descriptor_,
      RegisterRequest::default_instance_,
      RegisterRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterRequest));
  RegisterMsg_descriptor_ = file->message_type(8);
  static const int RegisterMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMsg, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMsg, userinfo_),
  };
  RegisterMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterMsg_descriptor_,
      RegisterMsg::default_instance_,
      RegisterMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterMsg));
  RefreshRequest_descriptor_ = file->message_type(9);
  static const int RefreshRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshRequest, userid_),
  };
  RefreshRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefreshRequest_descriptor_,
      RefreshRequest::default_instance_,
      RefreshRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefreshRequest));
  RefreshBackMsg_descriptor_ = file->message_type(10);
  static const int RefreshBackMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshBackMsg, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshBackMsg, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshBackMsg, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshBackMsg, roomlistinfo_),
  };
  RefreshBackMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefreshBackMsg_descriptor_,
      RefreshBackMsg::default_instance_,
      RefreshBackMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshBackMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshBackMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefreshBackMsg));
  EnterRoomRequest_descriptor_ = file->message_type(11);
  static const int EnterRoomRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomRequest, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomRequest, userid_),
  };
  EnterRoomRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterRoomRequest_descriptor_,
      EnterRoomRequest::default_instance_,
      EnterRoomRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterRoomRequest));
  PlayerInfoMsg_descriptor_ = file->message_type(12);
  static const int PlayerInfoMsg_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoMsg, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoMsg, playermoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoMsg, playerdiamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoMsg, playernickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoMsg, playerlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoMsg, currentexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoMsg, battlelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoMsg, playerglamour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoMsg, playerfacetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoMsg, playerviplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoMsg, hasfamily_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoMsg, playerfamily_),
  };
  PlayerInfoMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerInfoMsg_descriptor_,
      PlayerInfoMsg::default_instance_,
      PlayerInfoMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerInfoMsg));
  PokerMsg_descriptor_ = file->message_type(13);
  static const int PokerMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerMsg, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerMsg, pokervalue_),
  };
  PokerMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PokerMsg_descriptor_,
      PokerMsg::default_instance_,
      PokerMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PokerMsg));
  RoomBetEndMsg_descriptor_ = file->message_type(14);
  static const int RoomBetEndMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBetEndMsg, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBetEndMsg, bankerwinmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBetEndMsg, playerwinmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBetEndMsg, playerbetwinmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBetEndMsg, bisbanker_),
  };
  RoomBetEndMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomBetEndMsg_descriptor_,
      RoomBetEndMsg::default_instance_,
      RoomBetEndMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBetEndMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBetEndMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomBetEndMsg));
  BankerRequest_descriptor_ = file->message_type(15);
  static const int BankerRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerRequest, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerRequest, playerid_),
  };
  BankerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BankerRequest_descriptor_,
      BankerRequest::default_instance_,
      BankerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BankerRequest));
  RoomBankerListMsg_descriptor_ = file->message_type(16);
  static const int RoomBankerListMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBankerListMsg, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBankerListMsg, bankerlist_),
  };
  RoomBankerListMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomBankerListMsg_descriptor_,
      RoomBankerListMsg::default_instance_,
      RoomBankerListMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBankerListMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBankerListMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomBankerListMsg));
  RoomBankerListMsg_Banker_descriptor_ = RoomBankerListMsg_descriptor_->nested_type(0);
  static const int RoomBankerListMsg_Banker_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBankerListMsg_Banker, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBankerListMsg_Banker, playermoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBankerListMsg_Banker, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBankerListMsg_Banker, isbanker_),
  };
  RoomBankerListMsg_Banker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomBankerListMsg_Banker_descriptor_,
      RoomBankerListMsg_Banker::default_instance_,
      RoomBankerListMsg_Banker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBankerListMsg_Banker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBankerListMsg_Banker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomBankerListMsg_Banker));
  RoomStatusMsg_descriptor_ = file->message_type(17);
  static const int RoomStatusMsg_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomStatusMsg, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomStatusMsg, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomStatusMsg, entervalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomStatusMsg, currentstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomStatusMsg, currenttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomStatusMsg, bhasbanker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomStatusMsg, pokersetmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomStatusMsg, endmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomStatusMsg, playerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomStatusMsg, bankerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomStatusMsg, status_),
  };
  RoomStatusMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomStatusMsg_descriptor_,
      RoomStatusMsg::default_instance_,
      RoomStatusMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomStatusMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomStatusMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomStatusMsg));
  RoomBetMsg_descriptor_ = file->message_type(18);
  static const int RoomBetMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBetMsg, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBetMsg, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBetMsg, betmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBetMsg, betid_),
  };
  RoomBetMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomBetMsg_descriptor_,
      RoomBetMsg::default_instance_,
      RoomBetMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBetMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBetMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomBetMsg));
  RoomBetTotalMsg_descriptor_ = file->message_type(19);
  static const int RoomBetTotalMsg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBetTotalMsg, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBetTotalMsg, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBetTotalMsg, isbetted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBetTotalMsg, isvalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBetTotalMsg, betid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBetTotalMsg, betmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBetTotalMsg, totalbetmoney_),
  };
  RoomBetTotalMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomBetTotalMsg_descriptor_,
      RoomBetTotalMsg::default_instance_,
      RoomBetTotalMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBetTotalMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBetTotalMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomBetTotalMsg));
  RoomStatusTimeCfgRequest_descriptor_ = file->message_type(20);
  static const int RoomStatusTimeCfgRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomStatusTimeCfgRequest, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomStatusTimeCfgRequest, userid_),
  };
  RoomStatusTimeCfgRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomStatusTimeCfgRequest_descriptor_,
      RoomStatusTimeCfgRequest::default_instance_,
      RoomStatusTimeCfgRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomStatusTimeCfgRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomStatusTimeCfgRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomStatusTimeCfgRequest));
  RoomStatusTimeCfgMsg_descriptor_ = file->message_type(21);
  static const int RoomStatusTimeCfgMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomStatusTimeCfgMsg, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomStatusTimeCfgMsg, currentstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomStatusTimeCfgMsg, currenttime_),
  };
  RoomStatusTimeCfgMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomStatusTimeCfgMsg_descriptor_,
      RoomStatusTimeCfgMsg::default_instance_,
      RoomStatusTimeCfgMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomStatusTimeCfgMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomStatusTimeCfgMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomStatusTimeCfgMsg));
  ExitRoomMsg_descriptor_ = file->message_type(22);
  static const int ExitRoomMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitRoomMsg, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitRoomMsg, playerid_),
  };
  ExitRoomMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExitRoomMsg_descriptor_,
      ExitRoomMsg::default_instance_,
      ExitRoomMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitRoomMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitRoomMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExitRoomMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRequest_descriptor_, &LoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfoMsg_descriptor_, &UserInfoMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginMsg_descriptor_, &LoginMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitRoomRequest_descriptor_, &InitRoomRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomInfoMsg_descriptor_, &RoomInfoMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomListInfoMsg_descriptor_, &RoomListInfoMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitRoomMsg_descriptor_, &InitRoomMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterRequest_descriptor_, &RegisterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterMsg_descriptor_, &RegisterMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefreshRequest_descriptor_, &RefreshRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefreshBackMsg_descriptor_, &RefreshBackMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterRoomRequest_descriptor_, &EnterRoomRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerInfoMsg_descriptor_, &PlayerInfoMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PokerMsg_descriptor_, &PokerMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomBetEndMsg_descriptor_, &RoomBetEndMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BankerRequest_descriptor_, &BankerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomBankerListMsg_descriptor_, &RoomBankerListMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomBankerListMsg_Banker_descriptor_, &RoomBankerListMsg_Banker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomStatusMsg_descriptor_, &RoomStatusMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomBetMsg_descriptor_, &RoomBetMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomBetTotalMsg_descriptor_, &RoomBetTotalMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomStatusTimeCfgRequest_descriptor_, &RoomStatusTimeCfgRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomStatusTimeCfgMsg_descriptor_, &RoomStatusTimeCfgMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExitRoomMsg_descriptor_, &ExitRoomMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete LoginRequest::default_instance_;
  delete LoginRequest_reflection_;
  delete UserInfoMsg::default_instance_;
  delete UserInfoMsg_reflection_;
  delete LoginMsg::default_instance_;
  delete LoginMsg_reflection_;
  delete InitRoomRequest::default_instance_;
  delete InitRoomRequest_reflection_;
  delete RoomInfoMsg::default_instance_;
  delete RoomInfoMsg_reflection_;
  delete RoomListInfoMsg::default_instance_;
  delete RoomListInfoMsg_reflection_;
  delete InitRoomMsg::default_instance_;
  delete InitRoomMsg_reflection_;
  delete RegisterRequest::default_instance_;
  delete RegisterRequest_reflection_;
  delete RegisterMsg::default_instance_;
  delete RegisterMsg_reflection_;
  delete RefreshRequest::default_instance_;
  delete RefreshRequest_reflection_;
  delete RefreshBackMsg::default_instance_;
  delete RefreshBackMsg_reflection_;
  delete EnterRoomRequest::default_instance_;
  delete EnterRoomRequest_reflection_;
  delete PlayerInfoMsg::default_instance_;
  delete PlayerInfoMsg_reflection_;
  delete PokerMsg::default_instance_;
  delete PokerMsg_reflection_;
  delete RoomBetEndMsg::default_instance_;
  delete RoomBetEndMsg_reflection_;
  delete BankerRequest::default_instance_;
  delete BankerRequest_reflection_;
  delete RoomBankerListMsg::default_instance_;
  delete RoomBankerListMsg_reflection_;
  delete RoomBankerListMsg_Banker::default_instance_;
  delete RoomBankerListMsg_Banker_reflection_;
  delete RoomStatusMsg::default_instance_;
  delete RoomStatusMsg_reflection_;
  delete RoomBetMsg::default_instance_;
  delete RoomBetMsg_reflection_;
  delete RoomBetTotalMsg::default_instance_;
  delete RoomBetTotalMsg_reflection_;
  delete RoomStatusTimeCfgRequest::default_instance_;
  delete RoomStatusTimeCfgRequest_reflection_;
  delete RoomStatusTimeCfgMsg::default_instance_;
  delete RoomStatusTimeCfgMsg_reflection_;
  delete ExitRoomMsg::default_instance_;
  delete ExitRoomMsg_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\022\tbullfight\"0\n\014LoginReque"
    "st\022\020\n\010username\030\001 \002(\t\022\016\n\006passwd\030\002 \002(\t\"\355\001\n"
    "\013UserInfoMsg\022\016\n\006userID\030\001 \002(\005\022\021\n\tuserLeve"
    "l\030\002 \002(\005\022\020\n\010nickName\030\003 \002(\t\022\r\n\005money\030\004 \002(\005"
    "\022\020\n\010diamonds\030\005 \002(\005\022\013\n\003VIP\030\006 \002(\005\022\024\n\014userF"
    "aceType\030\007 \002(\005\022\024\n\014userGlamours\030\010 \002(\005\022\025\n\ru"
    "serBankMoney\030\t \002(\005\022\027\n\017userBattleLevel\030\n "
    "\002(\005\022\022\n\ncurrentExp\030\013 \002(\005\022\013\n\003sex\030\014 \002(\005\"D\n\010"
    "LoginMsg\022\016\n\006status\030\001 \002(\005\022(\n\010userInfo\030\002 \001"
    "(\0132\026.bullfight.UserInfoMsg\"!\n\017InitRoomRe"
    "quest\022\016\n\006userID\030\001 \002(\005\"t\n\013RoomInfoMsg\022\016\n\006"
    "roomID\030\001 \002(\005\022\023\n\013roomPNumber\030\002 \002(\005\022\020\n\010roo"
    "mType\030\003 \002(\005\022\025\n\rroomLimitType\030\004 \002(\005\022\027\n\017ro"
    "omDescribtion\030\005 \002(\t\";\n\017RoomListInfoMsg\022("
    "\n\010roomInfo\030\001 \003(\0132\026.bullfight.RoomInfoMsg"
    "\"_\n\013InitRoomMsg\022\016\n\006status\030\001 \002(\005\022\016\n\006userI"
    "D\030\002 \002(\005\0220\n\014roomListInfo\030\003 \001(\0132\032.bullfigh"
    "t.RoomListInfoMsg\"E\n\017RegisterRequest\022\020\n\010"
    "username\030\001 \002(\t\022\016\n\006passwd\030\002 \002(\t\022\020\n\010nickna"
    "me\030\003 \002(\t\"G\n\013RegisterMsg\022\016\n\006status\030\001 \002(\005\022"
    "(\n\010userInfo\030\002 \001(\0132\026.bullfight.UserInfoMs"
    "g\" \n\016RefreshRequest\022\016\n\006userID\030\001 \002(\005\"\214\001\n\016"
    "RefreshBackMsg\022\016\n\006status\030\001 \002(\005\022\016\n\006userID"
    "\030\002 \002(\005\022(\n\010userInfo\030\003 \002(\0132\026.bullfight.Use"
    "rInfoMsg\0220\n\014roomListInfo\030\004 \001(\0132\032.bullfig"
    "ht.RoomListInfoMsg\"2\n\020EnterRoomRequest\022\016"
    "\n\006roomID\030\001 \002(\005\022\016\n\006userID\030\002 \002(\005\"\234\002\n\rPlaye"
    "rInfoMsg\022\020\n\010playerID\030\001 \002(\005\022\023\n\013playerMone"
    "y\030\002 \002(\005\022\025\n\rplayerDiamond\030\003 \002(\005\022\026\n\016player"
    "NickName\030\004 \002(\t\022\023\n\013playerLevel\030\005 \002(\005\022\022\n\nc"
    "urrentExp\030\006 \002(\005\022\023\n\013battleLevel\030\007 \002(\005\022\025\n\r"
    "playerGlamour\030\010 \002(\005\022\026\n\016playerFaceType\030\t "
    "\002(\005\022\026\n\016playerVIPLevel\030\n \002(\005\022\030\n\thasFamily"
    "\030\013 \001(\010:\005false\022\026\n\014playerFamily\030\014 \001(\t:\000\".\n"
    "\010PokerMsg\022\016\n\006roomID\030\001 \002(\005\022\022\n\npokerValue\030"
    "\002 \003(\005\"\204\001\n\rRoomBetEndMsg\022\016\n\006roomID\030\001 \002(\005\022"
    "\026\n\016bankerWinMoney\030\002 \002(\005\022\026\n\016playerWinMone"
    "y\030\003 \002(\005\022\031\n\021playerBetWinMoney\030\004 \003(\005\022\030\n\tbI"
    "sBanker\030\005 \001(\010:\005false\"1\n\rBankerRequest\022\016\n"
    "\006roomID\030\001 \002(\005\022\020\n\010playerID\030\002 \002(\005\"\263\001\n\021Room"
    "BankerListMsg\022\016\n\006roomID\030\001 \002(\005\0227\n\nbankerL"
    "ist\030\002 \003(\0132#.bullfight.RoomBankerListMsg."
    "Banker\032U\n\006Banker\022\020\n\010playerID\030\001 \002(\005\022\023\n\013pl"
    "ayerMoney\030\002 \002(\005\022\022\n\nplayerName\030\003 \002(\t\022\020\n\010i"
    "sBanker\030\004 \002(\010\"\326\002\n\rRoomStatusMsg\022\016\n\006roomI"
    "D\030\001 \002(\005\022\020\n\010playerID\030\002 \002(\005\022\022\n\nenterValid\030"
    "\003 \002(\010\022\030\n\rcurrentStatus\030\004 \001(\005:\0010\022\026\n\013curre"
    "ntTime\030\005 \001(\005:\0010\022\031\n\nbHasBanker\030\006 \001(\010:\005fal"
    "se\022(\n\013pokerSetMsg\030\007 \001(\0132\023.bullfight.Poke"
    "rMsg\022(\n\006endMsg\030\010 \001(\0132\030.bullfight.RoomBet"
    "EndMsg\022,\n\nplayerList\030\t \003(\0132\030.bullfight.P"
    "layerInfoMsg\0220\n\nbankerList\030\n \001(\0132\034.bullf"
    "ight.RoomBankerListMsg\022\016\n\006status\030\013 \002(\005\"O"
    "\n\nRoomBetMsg\022\016\n\006roomID\030\001 \002(\005\022\020\n\010playerID"
    "\030\002 \002(\005\022\020\n\010betMoney\030\003 \002(\005\022\r\n\005betID\030\004 \002(\005\""
    "\245\001\n\017RoomBetTotalMsg\022\016\n\006roomID\030\001 \002(\005\022\023\n\010p"
    "layerID\030\002 \001(\005:\0010\022\027\n\010isBetted\030\003 \001(\010:\005fals"
    "e\022\026\n\007isValid\030\004 \001(\010:\005false\022\020\n\005betID\030\005 \001(\005"
    ":\0010\022\023\n\010betMoney\030\006 \001(\005:\0010\022\025\n\rtotalBetMone"
    "y\030\007 \003(\005\":\n\030RoomStatusTimeCfgRequest\022\016\n\006r"
    "oomID\030\001 \002(\005\022\016\n\006userID\030\002 \002(\005\"R\n\024RoomStatu"
    "sTimeCfgMsg\022\016\n\006roomID\030\001 \002(\005\022\025\n\rcurrentSt"
    "atus\030\002 \002(\005\022\023\n\013currentTime\030\003 \002(\005\"/\n\013ExitR"
    "oomMsg\022\016\n\006roomID\030\001 \002(\005\022\020\n\010playerID\030\002 \002(\005", 2560);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  LoginRequest::default_instance_ = new LoginRequest();
  UserInfoMsg::default_instance_ = new UserInfoMsg();
  LoginMsg::default_instance_ = new LoginMsg();
  InitRoomRequest::default_instance_ = new InitRoomRequest();
  RoomInfoMsg::default_instance_ = new RoomInfoMsg();
  RoomListInfoMsg::default_instance_ = new RoomListInfoMsg();
  InitRoomMsg::default_instance_ = new InitRoomMsg();
  RegisterRequest::default_instance_ = new RegisterRequest();
  RegisterMsg::default_instance_ = new RegisterMsg();
  RefreshRequest::default_instance_ = new RefreshRequest();
  RefreshBackMsg::default_instance_ = new RefreshBackMsg();
  EnterRoomRequest::default_instance_ = new EnterRoomRequest();
  PlayerInfoMsg::default_instance_ = new PlayerInfoMsg();
  PokerMsg::default_instance_ = new PokerMsg();
  RoomBetEndMsg::default_instance_ = new RoomBetEndMsg();
  BankerRequest::default_instance_ = new BankerRequest();
  RoomBankerListMsg::default_instance_ = new RoomBankerListMsg();
  RoomBankerListMsg_Banker::default_instance_ = new RoomBankerListMsg_Banker();
  RoomStatusMsg::default_instance_ = new RoomStatusMsg();
  RoomBetMsg::default_instance_ = new RoomBetMsg();
  RoomBetTotalMsg::default_instance_ = new RoomBetTotalMsg();
  RoomStatusTimeCfgRequest::default_instance_ = new RoomStatusTimeCfgRequest();
  RoomStatusTimeCfgMsg::default_instance_ = new RoomStatusTimeCfgMsg();
  ExitRoomMsg::default_instance_ = new ExitRoomMsg();
  LoginRequest::default_instance_->InitAsDefaultInstance();
  UserInfoMsg::default_instance_->InitAsDefaultInstance();
  LoginMsg::default_instance_->InitAsDefaultInstance();
  InitRoomRequest::default_instance_->InitAsDefaultInstance();
  RoomInfoMsg::default_instance_->InitAsDefaultInstance();
  RoomListInfoMsg::default_instance_->InitAsDefaultInstance();
  InitRoomMsg::default_instance_->InitAsDefaultInstance();
  RegisterRequest::default_instance_->InitAsDefaultInstance();
  RegisterMsg::default_instance_->InitAsDefaultInstance();
  RefreshRequest::default_instance_->InitAsDefaultInstance();
  RefreshBackMsg::default_instance_->InitAsDefaultInstance();
  EnterRoomRequest::default_instance_->InitAsDefaultInstance();
  PlayerInfoMsg::default_instance_->InitAsDefaultInstance();
  PokerMsg::default_instance_->InitAsDefaultInstance();
  RoomBetEndMsg::default_instance_->InitAsDefaultInstance();
  BankerRequest::default_instance_->InitAsDefaultInstance();
  RoomBankerListMsg::default_instance_->InitAsDefaultInstance();
  RoomBankerListMsg_Banker::default_instance_->InitAsDefaultInstance();
  RoomStatusMsg::default_instance_->InitAsDefaultInstance();
  RoomBetMsg::default_instance_->InitAsDefaultInstance();
  RoomBetTotalMsg::default_instance_->InitAsDefaultInstance();
  RoomStatusTimeCfgRequest::default_instance_->InitAsDefaultInstance();
  RoomStatusTimeCfgMsg::default_instance_->InitAsDefaultInstance();
  ExitRoomMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LoginRequest::kUsernameFieldNumber;
const int LoginRequest::kPasswdFieldNumber;
#endif  // !_MSC_VER

LoginRequest::LoginRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRequest::InitAsDefaultInstance() {
}

LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRequest::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRequest::~LoginRequest() {
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRequest_descriptor_;
}

const LoginRequest& LoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

LoginRequest* LoginRequest::default_instance_ = NULL;

LoginRequest* LoginRequest::New() const {
  return new LoginRequest;
}

void LoginRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_passwd;
        break;
      }

      // required string passwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }

  // required string passwd = 2;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->passwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required string passwd = 2;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->passwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required string passwd = 2;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRequest_descriptor_;
  metadata.reflection = LoginRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfoMsg::kUserIDFieldNumber;
const int UserInfoMsg::kUserLevelFieldNumber;
const int UserInfoMsg::kNickNameFieldNumber;
const int UserInfoMsg::kMoneyFieldNumber;
const int UserInfoMsg::kDiamondsFieldNumber;
const int UserInfoMsg::kVIPFieldNumber;
const int UserInfoMsg::kUserFaceTypeFieldNumber;
const int UserInfoMsg::kUserGlamoursFieldNumber;
const int UserInfoMsg::kUserBankMoneyFieldNumber;
const int UserInfoMsg::kUserBattleLevelFieldNumber;
const int UserInfoMsg::kCurrentExpFieldNumber;
const int UserInfoMsg::kSexFieldNumber;
#endif  // !_MSC_VER

UserInfoMsg::UserInfoMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserInfoMsg::InitAsDefaultInstance() {
}

UserInfoMsg::UserInfoMsg(const UserInfoMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserInfoMsg::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  userlevel_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  money_ = 0;
  diamonds_ = 0;
  vip_ = 0;
  userfacetype_ = 0;
  userglamours_ = 0;
  userbankmoney_ = 0;
  userbattlelevel_ = 0;
  currentexp_ = 0;
  sex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfoMsg::~UserInfoMsg() {
  SharedDtor();
}

void UserInfoMsg::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void UserInfoMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfoMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfoMsg_descriptor_;
}

const UserInfoMsg& UserInfoMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

UserInfoMsg* UserInfoMsg::default_instance_ = NULL;

UserInfoMsg* UserInfoMsg::New() const {
  return new UserInfoMsg;
}

void UserInfoMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    userlevel_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    money_ = 0;
    diamonds_ = 0;
    vip_ = 0;
    userfacetype_ = 0;
    userglamours_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    userbankmoney_ = 0;
    userbattlelevel_ = 0;
    currentexp_ = 0;
    sex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfoMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userLevel;
        break;
      }

      // required int32 userLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userlevel_)));
          set_has_userlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nickName;
        break;
      }

      // required string nickName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_money;
        break;
      }

      // required int32 money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_diamonds;
        break;
      }

      // required int32 diamonds = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamonds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamonds_)));
          set_has_diamonds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_VIP;
        break;
      }

      // required int32 VIP = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VIP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_userFaceType;
        break;
      }

      // required int32 userFaceType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userFaceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userfacetype_)));
          set_has_userfacetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_userGlamours;
        break;
      }

      // required int32 userGlamours = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userGlamours:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userglamours_)));
          set_has_userglamours();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_userBankMoney;
        break;
      }

      // required int32 userBankMoney = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userBankMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userbankmoney_)));
          set_has_userbankmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_userBattleLevel;
        break;
      }

      // required int32 userBattleLevel = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userBattleLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userbattlelevel_)));
          set_has_userbattlelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_currentExp;
        break;
      }

      // required int32 currentExp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentexp_)));
          set_has_currentexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_sex;
        break;
      }

      // required int32 sex = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserInfoMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 userID = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // required int32 userLevel = 2;
  if (has_userlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userlevel(), output);
  }

  // required string nickName = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nickname(), output);
  }

  // required int32 money = 4;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->money(), output);
  }

  // required int32 diamonds = 5;
  if (has_diamonds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->diamonds(), output);
  }

  // required int32 VIP = 6;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->vip(), output);
  }

  // required int32 userFaceType = 7;
  if (has_userfacetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->userfacetype(), output);
  }

  // required int32 userGlamours = 8;
  if (has_userglamours()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->userglamours(), output);
  }

  // required int32 userBankMoney = 9;
  if (has_userbankmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->userbankmoney(), output);
  }

  // required int32 userBattleLevel = 10;
  if (has_userbattlelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->userbattlelevel(), output);
  }

  // required int32 currentExp = 11;
  if (has_currentexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->currentexp(), output);
  }

  // required int32 sex = 12;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->sex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserInfoMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 userID = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // required int32 userLevel = 2;
  if (has_userlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userlevel(), target);
  }

  // required string nickName = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // required int32 money = 4;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->money(), target);
  }

  // required int32 diamonds = 5;
  if (has_diamonds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->diamonds(), target);
  }

  // required int32 VIP = 6;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->vip(), target);
  }

  // required int32 userFaceType = 7;
  if (has_userfacetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->userfacetype(), target);
  }

  // required int32 userGlamours = 8;
  if (has_userglamours()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->userglamours(), target);
  }

  // required int32 userBankMoney = 9;
  if (has_userbankmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->userbankmoney(), target);
  }

  // required int32 userBattleLevel = 10;
  if (has_userbattlelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->userbattlelevel(), target);
  }

  // required int32 currentExp = 11;
  if (has_currentexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->currentexp(), target);
  }

  // required int32 sex = 12;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->sex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserInfoMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 userID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required int32 userLevel = 2;
    if (has_userlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userlevel());
    }

    // required string nickName = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // required int32 money = 4;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // required int32 diamonds = 5;
    if (has_diamonds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamonds());
    }

    // required int32 VIP = 6;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }

    // required int32 userFaceType = 7;
    if (has_userfacetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userfacetype());
    }

    // required int32 userGlamours = 8;
    if (has_userglamours()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userglamours());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 userBankMoney = 9;
    if (has_userbankmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userbankmoney());
    }

    // required int32 userBattleLevel = 10;
    if (has_userbattlelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userbattlelevel());
    }

    // required int32 currentExp = 11;
    if (has_currentexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentexp());
    }

    // required int32 sex = 12;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfoMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfoMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfoMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfoMsg::MergeFrom(const UserInfoMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_userlevel()) {
      set_userlevel(from.userlevel());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_diamonds()) {
      set_diamonds(from.diamonds());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_userfacetype()) {
      set_userfacetype(from.userfacetype());
    }
    if (from.has_userglamours()) {
      set_userglamours(from.userglamours());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_userbankmoney()) {
      set_userbankmoney(from.userbankmoney());
    }
    if (from.has_userbattlelevel()) {
      set_userbattlelevel(from.userbattlelevel());
    }
    if (from.has_currentexp()) {
      set_currentexp(from.currentexp());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfoMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfoMsg::CopyFrom(const UserInfoMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void UserInfoMsg::Swap(UserInfoMsg* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(userlevel_, other->userlevel_);
    std::swap(nickname_, other->nickname_);
    std::swap(money_, other->money_);
    std::swap(diamonds_, other->diamonds_);
    std::swap(vip_, other->vip_);
    std::swap(userfacetype_, other->userfacetype_);
    std::swap(userglamours_, other->userglamours_);
    std::swap(userbankmoney_, other->userbankmoney_);
    std::swap(userbattlelevel_, other->userbattlelevel_);
    std::swap(currentexp_, other->currentexp_);
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfoMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfoMsg_descriptor_;
  metadata.reflection = UserInfoMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginMsg::kStatusFieldNumber;
const int LoginMsg::kUserInfoFieldNumber;
#endif  // !_MSC_VER

LoginMsg::LoginMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginMsg::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::bullfight::UserInfoMsg*>(&::bullfight::UserInfoMsg::default_instance());
}

LoginMsg::LoginMsg(const LoginMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginMsg::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  userinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginMsg::~LoginMsg() {
  SharedDtor();
}

void LoginMsg::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void LoginMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginMsg_descriptor_;
}

const LoginMsg& LoginMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

LoginMsg* LoginMsg::default_instance_ = NULL;

LoginMsg* LoginMsg::New() const {
  return new LoginMsg;
}

void LoginMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::bullfight::UserInfoMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userInfo;
        break;
      }

      // optional .bullfight.UserInfoMsg userInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // optional .bullfight.UserInfoMsg userInfo = 2;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // optional .bullfight.UserInfoMsg userInfo = 2;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional .bullfight.UserInfoMsg userInfo = 2;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginMsg::MergeFrom(const LoginMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::bullfight::UserInfoMsg::MergeFrom(from.userinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginMsg::CopyFrom(const LoginMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_userinfo()) {
    if (!this->userinfo().IsInitialized()) return false;
  }
  return true;
}

void LoginMsg::Swap(LoginMsg* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginMsg_descriptor_;
  metadata.reflection = LoginMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InitRoomRequest::kUserIDFieldNumber;
#endif  // !_MSC_VER

InitRoomRequest::InitRoomRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InitRoomRequest::InitAsDefaultInstance() {
}

InitRoomRequest::InitRoomRequest(const InitRoomRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InitRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitRoomRequest::~InitRoomRequest() {
  SharedDtor();
}

void InitRoomRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InitRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitRoomRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitRoomRequest_descriptor_;
}

const InitRoomRequest& InitRoomRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

InitRoomRequest* InitRoomRequest::default_instance_ = NULL;

InitRoomRequest* InitRoomRequest::New() const {
  return new InitRoomRequest;
}

void InitRoomRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InitRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 userID = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InitRoomRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 userID = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InitRoomRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 userID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitRoomRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitRoomRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitRoomRequest::MergeFrom(const InitRoomRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitRoomRequest::CopyFrom(const InitRoomRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitRoomRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InitRoomRequest::Swap(InitRoomRequest* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitRoomRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitRoomRequest_descriptor_;
  metadata.reflection = InitRoomRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomInfoMsg::kRoomIDFieldNumber;
const int RoomInfoMsg::kRoomPNumberFieldNumber;
const int RoomInfoMsg::kRoomTypeFieldNumber;
const int RoomInfoMsg::kRoomLimitTypeFieldNumber;
const int RoomInfoMsg::kRoomDescribtionFieldNumber;
#endif  // !_MSC_VER

RoomInfoMsg::RoomInfoMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoomInfoMsg::InitAsDefaultInstance() {
}

RoomInfoMsg::RoomInfoMsg(const RoomInfoMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoomInfoMsg::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  roompnumber_ = 0;
  roomtype_ = 0;
  roomlimittype_ = 0;
  roomdescribtion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomInfoMsg::~RoomInfoMsg() {
  SharedDtor();
}

void RoomInfoMsg::SharedDtor() {
  if (roomdescribtion_ != &::google::protobuf::internal::kEmptyString) {
    delete roomdescribtion_;
  }
  if (this != default_instance_) {
  }
}

void RoomInfoMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomInfoMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomInfoMsg_descriptor_;
}

const RoomInfoMsg& RoomInfoMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

RoomInfoMsg* RoomInfoMsg::default_instance_ = NULL;

RoomInfoMsg* RoomInfoMsg::New() const {
  return new RoomInfoMsg;
}

void RoomInfoMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
    roompnumber_ = 0;
    roomtype_ = 0;
    roomlimittype_ = 0;
    if (has_roomdescribtion()) {
      if (roomdescribtion_ != &::google::protobuf::internal::kEmptyString) {
        roomdescribtion_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomInfoMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomPNumber;
        break;
      }

      // required int32 roomPNumber = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomPNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roompnumber_)));
          set_has_roompnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roomType;
        break;
      }

      // required int32 roomType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomtype_)));
          set_has_roomtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_roomLimitType;
        break;
      }

      // required int32 roomLimitType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomLimitType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomlimittype_)));
          set_has_roomlimittype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_roomDescribtion;
        break;
      }

      // required string roomDescribtion = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomDescribtion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomdescribtion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomdescribtion().data(), this->roomdescribtion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoomInfoMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // required int32 roomPNumber = 2;
  if (has_roompnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roompnumber(), output);
  }

  // required int32 roomType = 3;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->roomtype(), output);
  }

  // required int32 roomLimitType = 4;
  if (has_roomlimittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->roomlimittype(), output);
  }

  // required string roomDescribtion = 5;
  if (has_roomdescribtion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomdescribtion().data(), this->roomdescribtion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->roomdescribtion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoomInfoMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // required int32 roomPNumber = 2;
  if (has_roompnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roompnumber(), target);
  }

  // required int32 roomType = 3;
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->roomtype(), target);
  }

  // required int32 roomLimitType = 4;
  if (has_roomlimittype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->roomlimittype(), target);
  }

  // required string roomDescribtion = 5;
  if (has_roomdescribtion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomdescribtion().data(), this->roomdescribtion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->roomdescribtion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoomInfoMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // required int32 roomPNumber = 2;
    if (has_roompnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roompnumber());
    }

    // required int32 roomType = 3;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomtype());
    }

    // required int32 roomLimitType = 4;
    if (has_roomlimittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomlimittype());
    }

    // required string roomDescribtion = 5;
    if (has_roomdescribtion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomdescribtion());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomInfoMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomInfoMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomInfoMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomInfoMsg::MergeFrom(const RoomInfoMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_roompnumber()) {
      set_roompnumber(from.roompnumber());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
    if (from.has_roomlimittype()) {
      set_roomlimittype(from.roomlimittype());
    }
    if (from.has_roomdescribtion()) {
      set_roomdescribtion(from.roomdescribtion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomInfoMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomInfoMsg::CopyFrom(const RoomInfoMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInfoMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void RoomInfoMsg::Swap(RoomInfoMsg* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(roompnumber_, other->roompnumber_);
    std::swap(roomtype_, other->roomtype_);
    std::swap(roomlimittype_, other->roomlimittype_);
    std::swap(roomdescribtion_, other->roomdescribtion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomInfoMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomInfoMsg_descriptor_;
  metadata.reflection = RoomInfoMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomListInfoMsg::kRoomInfoFieldNumber;
#endif  // !_MSC_VER

RoomListInfoMsg::RoomListInfoMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoomListInfoMsg::InitAsDefaultInstance() {
}

RoomListInfoMsg::RoomListInfoMsg(const RoomListInfoMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoomListInfoMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomListInfoMsg::~RoomListInfoMsg() {
  SharedDtor();
}

void RoomListInfoMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomListInfoMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomListInfoMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomListInfoMsg_descriptor_;
}

const RoomListInfoMsg& RoomListInfoMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

RoomListInfoMsg* RoomListInfoMsg::default_instance_ = NULL;

RoomListInfoMsg* RoomListInfoMsg::New() const {
  return new RoomListInfoMsg;
}

void RoomListInfoMsg::Clear() {
  roominfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomListInfoMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bullfight.RoomInfoMsg roomInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roominfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_roomInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoomListInfoMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bullfight.RoomInfoMsg roomInfo = 1;
  for (int i = 0; i < this->roominfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roominfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoomListInfoMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bullfight.RoomInfoMsg roomInfo = 1;
  for (int i = 0; i < this->roominfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roominfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoomListInfoMsg::ByteSize() const {
  int total_size = 0;

  // repeated .bullfight.RoomInfoMsg roomInfo = 1;
  total_size += 1 * this->roominfo_size();
  for (int i = 0; i < this->roominfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roominfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomListInfoMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomListInfoMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomListInfoMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomListInfoMsg::MergeFrom(const RoomListInfoMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  roominfo_.MergeFrom(from.roominfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomListInfoMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomListInfoMsg::CopyFrom(const RoomListInfoMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomListInfoMsg::IsInitialized() const {

  for (int i = 0; i < roominfo_size(); i++) {
    if (!this->roominfo(i).IsInitialized()) return false;
  }
  return true;
}

void RoomListInfoMsg::Swap(RoomListInfoMsg* other) {
  if (other != this) {
    roominfo_.Swap(&other->roominfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomListInfoMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomListInfoMsg_descriptor_;
  metadata.reflection = RoomListInfoMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InitRoomMsg::kStatusFieldNumber;
const int InitRoomMsg::kUserIDFieldNumber;
const int InitRoomMsg::kRoomListInfoFieldNumber;
#endif  // !_MSC_VER

InitRoomMsg::InitRoomMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InitRoomMsg::InitAsDefaultInstance() {
  roomlistinfo_ = const_cast< ::bullfight::RoomListInfoMsg*>(&::bullfight::RoomListInfoMsg::default_instance());
}

InitRoomMsg::InitRoomMsg(const InitRoomMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InitRoomMsg::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  userid_ = 0;
  roomlistinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitRoomMsg::~InitRoomMsg() {
  SharedDtor();
}

void InitRoomMsg::SharedDtor() {
  if (this != default_instance_) {
    delete roomlistinfo_;
  }
}

void InitRoomMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitRoomMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitRoomMsg_descriptor_;
}

const InitRoomMsg& InitRoomMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

InitRoomMsg* InitRoomMsg::default_instance_ = NULL;

InitRoomMsg* InitRoomMsg::New() const {
  return new InitRoomMsg;
}

void InitRoomMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    userid_ = 0;
    if (has_roomlistinfo()) {
      if (roomlistinfo_ != NULL) roomlistinfo_->::bullfight::RoomListInfoMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitRoomMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userID;
        break;
      }

      // required int32 userID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_roomListInfo;
        break;
      }

      // optional .bullfight.RoomListInfoMsg roomListInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomListInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roomlistinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InitRoomMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // required int32 userID = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // optional .bullfight.RoomListInfoMsg roomListInfo = 3;
  if (has_roomlistinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->roomlistinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InitRoomMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // required int32 userID = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  // optional .bullfight.RoomListInfoMsg roomListInfo = 3;
  if (has_roomlistinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->roomlistinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InitRoomMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required int32 userID = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional .bullfight.RoomListInfoMsg roomListInfo = 3;
    if (has_roomlistinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roomlistinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitRoomMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitRoomMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitRoomMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitRoomMsg::MergeFrom(const InitRoomMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_roomlistinfo()) {
      mutable_roomlistinfo()->::bullfight::RoomListInfoMsg::MergeFrom(from.roomlistinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitRoomMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitRoomMsg::CopyFrom(const InitRoomMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitRoomMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_roomlistinfo()) {
    if (!this->roomlistinfo().IsInitialized()) return false;
  }
  return true;
}

void InitRoomMsg::Swap(InitRoomMsg* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(userid_, other->userid_);
    std::swap(roomlistinfo_, other->roomlistinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitRoomMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitRoomMsg_descriptor_;
  metadata.reflection = InitRoomMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterRequest::kUsernameFieldNumber;
const int RegisterRequest::kPasswdFieldNumber;
const int RegisterRequest::kNicknameFieldNumber;
#endif  // !_MSC_VER

RegisterRequest::RegisterRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegisterRequest::InitAsDefaultInstance() {
}

RegisterRequest::RegisterRequest(const RegisterRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegisterRequest::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterRequest::~RegisterRequest() {
  SharedDtor();
}

void RegisterRequest::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void RegisterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterRequest_descriptor_;
}

const RegisterRequest& RegisterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

RegisterRequest* RegisterRequest::default_instance_ = NULL;

RegisterRequest* RegisterRequest::New() const {
  return new RegisterRequest;
}

void RegisterRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_passwd;
        break;
      }

      // required string passwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // required string nickname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegisterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }

  // required string passwd = 2;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->passwd(), output);
  }

  // required string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegisterRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required string passwd = 2;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->passwd(), target);
  }

  // required string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegisterRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required string passwd = 2;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }

    // required string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterRequest::MergeFrom(const RegisterRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterRequest::CopyFrom(const RegisterRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RegisterRequest::Swap(RegisterRequest* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(passwd_, other->passwd_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterRequest_descriptor_;
  metadata.reflection = RegisterRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterMsg::kStatusFieldNumber;
const int RegisterMsg::kUserInfoFieldNumber;
#endif  // !_MSC_VER

RegisterMsg::RegisterMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegisterMsg::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::bullfight::UserInfoMsg*>(&::bullfight::UserInfoMsg::default_instance());
}

RegisterMsg::RegisterMsg(const RegisterMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegisterMsg::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  userinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterMsg::~RegisterMsg() {
  SharedDtor();
}

void RegisterMsg::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void RegisterMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterMsg_descriptor_;
}

const RegisterMsg& RegisterMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

RegisterMsg* RegisterMsg::default_instance_ = NULL;

RegisterMsg* RegisterMsg::New() const {
  return new RegisterMsg;
}

void RegisterMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::bullfight::UserInfoMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userInfo;
        break;
      }

      // optional .bullfight.UserInfoMsg userInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegisterMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // optional .bullfight.UserInfoMsg userInfo = 2;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegisterMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // optional .bullfight.UserInfoMsg userInfo = 2;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegisterMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional .bullfight.UserInfoMsg userInfo = 2;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterMsg::MergeFrom(const RegisterMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::bullfight::UserInfoMsg::MergeFrom(from.userinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterMsg::CopyFrom(const RegisterMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_userinfo()) {
    if (!this->userinfo().IsInitialized()) return false;
  }
  return true;
}

void RegisterMsg::Swap(RegisterMsg* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterMsg_descriptor_;
  metadata.reflection = RegisterMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RefreshRequest::kUserIDFieldNumber;
#endif  // !_MSC_VER

RefreshRequest::RefreshRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RefreshRequest::InitAsDefaultInstance() {
}

RefreshRequest::RefreshRequest(const RefreshRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RefreshRequest::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefreshRequest::~RefreshRequest() {
  SharedDtor();
}

void RefreshRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RefreshRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefreshRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefreshRequest_descriptor_;
}

const RefreshRequest& RefreshRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

RefreshRequest* RefreshRequest::default_instance_ = NULL;

RefreshRequest* RefreshRequest::New() const {
  return new RefreshRequest;
}

void RefreshRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RefreshRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RefreshRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 userID = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RefreshRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 userID = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RefreshRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 userID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefreshRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefreshRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefreshRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RefreshRequest::MergeFrom(const RefreshRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RefreshRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefreshRequest::CopyFrom(const RefreshRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RefreshRequest::Swap(RefreshRequest* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RefreshRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefreshRequest_descriptor_;
  metadata.reflection = RefreshRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RefreshBackMsg::kStatusFieldNumber;
const int RefreshBackMsg::kUserIDFieldNumber;
const int RefreshBackMsg::kUserInfoFieldNumber;
const int RefreshBackMsg::kRoomListInfoFieldNumber;
#endif  // !_MSC_VER

RefreshBackMsg::RefreshBackMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RefreshBackMsg::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::bullfight::UserInfoMsg*>(&::bullfight::UserInfoMsg::default_instance());
  roomlistinfo_ = const_cast< ::bullfight::RoomListInfoMsg*>(&::bullfight::RoomListInfoMsg::default_instance());
}

RefreshBackMsg::RefreshBackMsg(const RefreshBackMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RefreshBackMsg::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  userid_ = 0;
  userinfo_ = NULL;
  roomlistinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefreshBackMsg::~RefreshBackMsg() {
  SharedDtor();
}

void RefreshBackMsg::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
    delete roomlistinfo_;
  }
}

void RefreshBackMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefreshBackMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefreshBackMsg_descriptor_;
}

const RefreshBackMsg& RefreshBackMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

RefreshBackMsg* RefreshBackMsg::default_instance_ = NULL;

RefreshBackMsg* RefreshBackMsg::New() const {
  return new RefreshBackMsg;
}

void RefreshBackMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    userid_ = 0;
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::bullfight::UserInfoMsg::Clear();
    }
    if (has_roomlistinfo()) {
      if (roomlistinfo_ != NULL) roomlistinfo_->::bullfight::RoomListInfoMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RefreshBackMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userID;
        break;
      }

      // required int32 userID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_userInfo;
        break;
      }

      // required .bullfight.UserInfoMsg userInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_roomListInfo;
        break;
      }

      // optional .bullfight.RoomListInfoMsg roomListInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomListInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roomlistinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RefreshBackMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // required int32 userID = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // required .bullfight.UserInfoMsg userInfo = 3;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->userinfo(), output);
  }

  // optional .bullfight.RoomListInfoMsg roomListInfo = 4;
  if (has_roomlistinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->roomlistinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RefreshBackMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // required int32 userID = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  // required .bullfight.UserInfoMsg userInfo = 3;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->userinfo(), target);
  }

  // optional .bullfight.RoomListInfoMsg roomListInfo = 4;
  if (has_roomlistinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->roomlistinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RefreshBackMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required int32 userID = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required .bullfight.UserInfoMsg userInfo = 3;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional .bullfight.RoomListInfoMsg roomListInfo = 4;
    if (has_roomlistinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roomlistinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefreshBackMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefreshBackMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefreshBackMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RefreshBackMsg::MergeFrom(const RefreshBackMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::bullfight::UserInfoMsg::MergeFrom(from.userinfo());
    }
    if (from.has_roomlistinfo()) {
      mutable_roomlistinfo()->::bullfight::RoomListInfoMsg::MergeFrom(from.roomlistinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RefreshBackMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefreshBackMsg::CopyFrom(const RefreshBackMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshBackMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_userinfo()) {
    if (!this->userinfo().IsInitialized()) return false;
  }
  if (has_roomlistinfo()) {
    if (!this->roomlistinfo().IsInitialized()) return false;
  }
  return true;
}

void RefreshBackMsg::Swap(RefreshBackMsg* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(userid_, other->userid_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(roomlistinfo_, other->roomlistinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RefreshBackMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefreshBackMsg_descriptor_;
  metadata.reflection = RefreshBackMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterRoomRequest::kRoomIDFieldNumber;
const int EnterRoomRequest::kUserIDFieldNumber;
#endif  // !_MSC_VER

EnterRoomRequest::EnterRoomRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterRoomRequest::InitAsDefaultInstance() {
}

EnterRoomRequest::EnterRoomRequest(const EnterRoomRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterRoomRequest::~EnterRoomRequest() {
  SharedDtor();
}

void EnterRoomRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterRoomRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterRoomRequest_descriptor_;
}

const EnterRoomRequest& EnterRoomRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

EnterRoomRequest* EnterRoomRequest::default_instance_ = NULL;

EnterRoomRequest* EnterRoomRequest::New() const {
  return new EnterRoomRequest;
}

void EnterRoomRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
    userid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userID;
        break;
      }

      // required int32 userID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // required int32 userID = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterRoomRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // required int32 userID = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterRoomRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // required int32 userID = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterRoomRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterRoomRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterRoomRequest::MergeFrom(const EnterRoomRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterRoomRequest::CopyFrom(const EnterRoomRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterRoomRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EnterRoomRequest::Swap(EnterRoomRequest* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterRoomRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterRoomRequest_descriptor_;
  metadata.reflection = EnterRoomRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerInfoMsg::kPlayerIDFieldNumber;
const int PlayerInfoMsg::kPlayerMoneyFieldNumber;
const int PlayerInfoMsg::kPlayerDiamondFieldNumber;
const int PlayerInfoMsg::kPlayerNickNameFieldNumber;
const int PlayerInfoMsg::kPlayerLevelFieldNumber;
const int PlayerInfoMsg::kCurrentExpFieldNumber;
const int PlayerInfoMsg::kBattleLevelFieldNumber;
const int PlayerInfoMsg::kPlayerGlamourFieldNumber;
const int PlayerInfoMsg::kPlayerFaceTypeFieldNumber;
const int PlayerInfoMsg::kPlayerVIPLevelFieldNumber;
const int PlayerInfoMsg::kHasFamilyFieldNumber;
const int PlayerInfoMsg::kPlayerFamilyFieldNumber;
#endif  // !_MSC_VER

PlayerInfoMsg::PlayerInfoMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerInfoMsg::InitAsDefaultInstance() {
}

PlayerInfoMsg::PlayerInfoMsg(const PlayerInfoMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerInfoMsg::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0;
  playermoney_ = 0;
  playerdiamond_ = 0;
  playernickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerlevel_ = 0;
  currentexp_ = 0;
  battlelevel_ = 0;
  playerglamour_ = 0;
  playerfacetype_ = 0;
  playerviplevel_ = 0;
  hasfamily_ = false;
  playerfamily_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInfoMsg::~PlayerInfoMsg() {
  SharedDtor();
}

void PlayerInfoMsg::SharedDtor() {
  if (playernickname_ != &::google::protobuf::internal::kEmptyString) {
    delete playernickname_;
  }
  if (playerfamily_ != &::google::protobuf::internal::kEmptyString) {
    delete playerfamily_;
  }
  if (this != default_instance_) {
  }
}

void PlayerInfoMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfoMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfoMsg_descriptor_;
}

const PlayerInfoMsg& PlayerInfoMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

PlayerInfoMsg* PlayerInfoMsg::default_instance_ = NULL;

PlayerInfoMsg* PlayerInfoMsg::New() const {
  return new PlayerInfoMsg;
}

void PlayerInfoMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0;
    playermoney_ = 0;
    playerdiamond_ = 0;
    if (has_playernickname()) {
      if (playernickname_ != &::google::protobuf::internal::kEmptyString) {
        playernickname_->clear();
      }
    }
    playerlevel_ = 0;
    currentexp_ = 0;
    battlelevel_ = 0;
    playerglamour_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    playerfacetype_ = 0;
    playerviplevel_ = 0;
    hasfamily_ = false;
    if (has_playerfamily()) {
      if (playerfamily_ != &::google::protobuf::internal::kEmptyString) {
        playerfamily_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerInfoMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerMoney;
        break;
      }

      // required int32 playerMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playermoney_)));
          set_has_playermoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerDiamond;
        break;
      }

      // required int32 playerDiamond = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerDiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerdiamond_)));
          set_has_playerdiamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_playerNickName;
        break;
      }

      // required string playerNickName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playernickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playernickname().data(), this->playernickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_playerLevel;
        break;
      }

      // required int32 playerLevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerlevel_)));
          set_has_playerlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_currentExp;
        break;
      }

      // required int32 currentExp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentexp_)));
          set_has_currentexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_battleLevel;
        break;
      }

      // required int32 battleLevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battleLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battlelevel_)));
          set_has_battlelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_playerGlamour;
        break;
      }

      // required int32 playerGlamour = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerGlamour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerglamour_)));
          set_has_playerglamour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_playerFaceType;
        break;
      }

      // required int32 playerFaceType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerFaceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerfacetype_)));
          set_has_playerfacetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_playerVIPLevel;
        break;
      }

      // required int32 playerVIPLevel = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerVIPLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerviplevel_)));
          set_has_playerviplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_hasFamily;
        break;
      }

      // optional bool hasFamily = 11 [default = false];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasFamily:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasfamily_)));
          set_has_hasfamily();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_playerFamily;
        break;
      }

      // optional string playerFamily = 12 [default = ""];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerFamily:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerfamily()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerfamily().data(), this->playerfamily().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerInfoMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  // required int32 playerMoney = 2;
  if (has_playermoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playermoney(), output);
  }

  // required int32 playerDiamond = 3;
  if (has_playerdiamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playerdiamond(), output);
  }

  // required string playerNickName = 4;
  if (has_playernickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playernickname().data(), this->playernickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->playernickname(), output);
  }

  // required int32 playerLevel = 5;
  if (has_playerlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->playerlevel(), output);
  }

  // required int32 currentExp = 6;
  if (has_currentexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->currentexp(), output);
  }

  // required int32 battleLevel = 7;
  if (has_battlelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->battlelevel(), output);
  }

  // required int32 playerGlamour = 8;
  if (has_playerglamour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->playerglamour(), output);
  }

  // required int32 playerFaceType = 9;
  if (has_playerfacetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->playerfacetype(), output);
  }

  // required int32 playerVIPLevel = 10;
  if (has_playerviplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->playerviplevel(), output);
  }

  // optional bool hasFamily = 11 [default = false];
  if (has_hasfamily()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->hasfamily(), output);
  }

  // optional string playerFamily = 12 [default = ""];
  if (has_playerfamily()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerfamily().data(), this->playerfamily().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->playerfamily(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerInfoMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerid(), target);
  }

  // required int32 playerMoney = 2;
  if (has_playermoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playermoney(), target);
  }

  // required int32 playerDiamond = 3;
  if (has_playerdiamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playerdiamond(), target);
  }

  // required string playerNickName = 4;
  if (has_playernickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playernickname().data(), this->playernickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->playernickname(), target);
  }

  // required int32 playerLevel = 5;
  if (has_playerlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->playerlevel(), target);
  }

  // required int32 currentExp = 6;
  if (has_currentexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->currentexp(), target);
  }

  // required int32 battleLevel = 7;
  if (has_battlelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->battlelevel(), target);
  }

  // required int32 playerGlamour = 8;
  if (has_playerglamour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->playerglamour(), target);
  }

  // required int32 playerFaceType = 9;
  if (has_playerfacetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->playerfacetype(), target);
  }

  // required int32 playerVIPLevel = 10;
  if (has_playerviplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->playerviplevel(), target);
  }

  // optional bool hasFamily = 11 [default = false];
  if (has_hasfamily()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->hasfamily(), target);
  }

  // optional string playerFamily = 12 [default = ""];
  if (has_playerfamily()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerfamily().data(), this->playerfamily().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->playerfamily(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerInfoMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // required int32 playerMoney = 2;
    if (has_playermoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playermoney());
    }

    // required int32 playerDiamond = 3;
    if (has_playerdiamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerdiamond());
    }

    // required string playerNickName = 4;
    if (has_playernickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playernickname());
    }

    // required int32 playerLevel = 5;
    if (has_playerlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerlevel());
    }

    // required int32 currentExp = 6;
    if (has_currentexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentexp());
    }

    // required int32 battleLevel = 7;
    if (has_battlelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battlelevel());
    }

    // required int32 playerGlamour = 8;
    if (has_playerglamour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerglamour());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 playerFaceType = 9;
    if (has_playerfacetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerfacetype());
    }

    // required int32 playerVIPLevel = 10;
    if (has_playerviplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerviplevel());
    }

    // optional bool hasFamily = 11 [default = false];
    if (has_hasfamily()) {
      total_size += 1 + 1;
    }

    // optional string playerFamily = 12 [default = ""];
    if (has_playerfamily()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerfamily());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfoMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerInfoMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerInfoMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerInfoMsg::MergeFrom(const PlayerInfoMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_playermoney()) {
      set_playermoney(from.playermoney());
    }
    if (from.has_playerdiamond()) {
      set_playerdiamond(from.playerdiamond());
    }
    if (from.has_playernickname()) {
      set_playernickname(from.playernickname());
    }
    if (from.has_playerlevel()) {
      set_playerlevel(from.playerlevel());
    }
    if (from.has_currentexp()) {
      set_currentexp(from.currentexp());
    }
    if (from.has_battlelevel()) {
      set_battlelevel(from.battlelevel());
    }
    if (from.has_playerglamour()) {
      set_playerglamour(from.playerglamour());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_playerfacetype()) {
      set_playerfacetype(from.playerfacetype());
    }
    if (from.has_playerviplevel()) {
      set_playerviplevel(from.playerviplevel());
    }
    if (from.has_hasfamily()) {
      set_hasfamily(from.hasfamily());
    }
    if (from.has_playerfamily()) {
      set_playerfamily(from.playerfamily());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerInfoMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfoMsg::CopyFrom(const PlayerInfoMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void PlayerInfoMsg::Swap(PlayerInfoMsg* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(playermoney_, other->playermoney_);
    std::swap(playerdiamond_, other->playerdiamond_);
    std::swap(playernickname_, other->playernickname_);
    std::swap(playerlevel_, other->playerlevel_);
    std::swap(currentexp_, other->currentexp_);
    std::swap(battlelevel_, other->battlelevel_);
    std::swap(playerglamour_, other->playerglamour_);
    std::swap(playerfacetype_, other->playerfacetype_);
    std::swap(playerviplevel_, other->playerviplevel_);
    std::swap(hasfamily_, other->hasfamily_);
    std::swap(playerfamily_, other->playerfamily_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerInfoMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfoMsg_descriptor_;
  metadata.reflection = PlayerInfoMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PokerMsg::kRoomIDFieldNumber;
const int PokerMsg::kPokerValueFieldNumber;
#endif  // !_MSC_VER

PokerMsg::PokerMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PokerMsg::InitAsDefaultInstance() {
}

PokerMsg::PokerMsg(const PokerMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PokerMsg::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PokerMsg::~PokerMsg() {
  SharedDtor();
}

void PokerMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PokerMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PokerMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PokerMsg_descriptor_;
}

const PokerMsg& PokerMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

PokerMsg* PokerMsg::default_instance_ = NULL;

PokerMsg* PokerMsg::New() const {
  return new PokerMsg;
}

void PokerMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
  }
  pokervalue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PokerMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pokerValue;
        break;
      }

      // repeated int32 pokerValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pokerValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_pokervalue())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pokervalue())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pokerValue;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PokerMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // repeated int32 pokerValue = 2;
  for (int i = 0; i < this->pokervalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->pokervalue(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PokerMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // repeated int32 pokerValue = 2;
  for (int i = 0; i < this->pokervalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->pokervalue(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PokerMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  // repeated int32 pokerValue = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->pokervalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pokervalue(i));
    }
    total_size += 1 * this->pokervalue_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PokerMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PokerMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PokerMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PokerMsg::MergeFrom(const PokerMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  pokervalue_.MergeFrom(from.pokervalue_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PokerMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PokerMsg::CopyFrom(const PokerMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PokerMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PokerMsg::Swap(PokerMsg* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    pokervalue_.Swap(&other->pokervalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PokerMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PokerMsg_descriptor_;
  metadata.reflection = PokerMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomBetEndMsg::kRoomIDFieldNumber;
const int RoomBetEndMsg::kBankerWinMoneyFieldNumber;
const int RoomBetEndMsg::kPlayerWinMoneyFieldNumber;
const int RoomBetEndMsg::kPlayerBetWinMoneyFieldNumber;
const int RoomBetEndMsg::kBIsBankerFieldNumber;
#endif  // !_MSC_VER

RoomBetEndMsg::RoomBetEndMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoomBetEndMsg::InitAsDefaultInstance() {
}

RoomBetEndMsg::RoomBetEndMsg(const RoomBetEndMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoomBetEndMsg::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  bankerwinmoney_ = 0;
  playerwinmoney_ = 0;
  bisbanker_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomBetEndMsg::~RoomBetEndMsg() {
  SharedDtor();
}

void RoomBetEndMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomBetEndMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomBetEndMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomBetEndMsg_descriptor_;
}

const RoomBetEndMsg& RoomBetEndMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

RoomBetEndMsg* RoomBetEndMsg::default_instance_ = NULL;

RoomBetEndMsg* RoomBetEndMsg::New() const {
  return new RoomBetEndMsg;
}

void RoomBetEndMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
    bankerwinmoney_ = 0;
    playerwinmoney_ = 0;
    bisbanker_ = false;
  }
  playerbetwinmoney_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomBetEndMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bankerWinMoney;
        break;
      }

      // required int32 bankerWinMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankerWinMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankerwinmoney_)));
          set_has_bankerwinmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerWinMoney;
        break;
      }

      // required int32 playerWinMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerWinMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerwinmoney_)));
          set_has_playerwinmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_playerBetWinMoney;
        break;
      }

      // repeated int32 playerBetWinMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerBetWinMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_playerbetwinmoney())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_playerbetwinmoney())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_playerBetWinMoney;
        if (input->ExpectTag(40)) goto parse_bIsBanker;
        break;
      }

      // optional bool bIsBanker = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsBanker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisbanker_)));
          set_has_bisbanker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoomBetEndMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // required int32 bankerWinMoney = 2;
  if (has_bankerwinmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bankerwinmoney(), output);
  }

  // required int32 playerWinMoney = 3;
  if (has_playerwinmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playerwinmoney(), output);
  }

  // repeated int32 playerBetWinMoney = 4;
  for (int i = 0; i < this->playerbetwinmoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->playerbetwinmoney(i), output);
  }

  // optional bool bIsBanker = 5 [default = false];
  if (has_bisbanker()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->bisbanker(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoomBetEndMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // required int32 bankerWinMoney = 2;
  if (has_bankerwinmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bankerwinmoney(), target);
  }

  // required int32 playerWinMoney = 3;
  if (has_playerwinmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playerwinmoney(), target);
  }

  // repeated int32 playerBetWinMoney = 4;
  for (int i = 0; i < this->playerbetwinmoney_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->playerbetwinmoney(i), target);
  }

  // optional bool bIsBanker = 5 [default = false];
  if (has_bisbanker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->bisbanker(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoomBetEndMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // required int32 bankerWinMoney = 2;
    if (has_bankerwinmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankerwinmoney());
    }

    // required int32 playerWinMoney = 3;
    if (has_playerwinmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerwinmoney());
    }

    // optional bool bIsBanker = 5 [default = false];
    if (has_bisbanker()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 playerBetWinMoney = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->playerbetwinmoney_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->playerbetwinmoney(i));
    }
    total_size += 1 * this->playerbetwinmoney_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomBetEndMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomBetEndMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomBetEndMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomBetEndMsg::MergeFrom(const RoomBetEndMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerbetwinmoney_.MergeFrom(from.playerbetwinmoney_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_bankerwinmoney()) {
      set_bankerwinmoney(from.bankerwinmoney());
    }
    if (from.has_playerwinmoney()) {
      set_playerwinmoney(from.playerwinmoney());
    }
    if (from.has_bisbanker()) {
      set_bisbanker(from.bisbanker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomBetEndMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomBetEndMsg::CopyFrom(const RoomBetEndMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomBetEndMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RoomBetEndMsg::Swap(RoomBetEndMsg* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(bankerwinmoney_, other->bankerwinmoney_);
    std::swap(playerwinmoney_, other->playerwinmoney_);
    playerbetwinmoney_.Swap(&other->playerbetwinmoney_);
    std::swap(bisbanker_, other->bisbanker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomBetEndMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomBetEndMsg_descriptor_;
  metadata.reflection = RoomBetEndMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BankerRequest::kRoomIDFieldNumber;
const int BankerRequest::kPlayerIDFieldNumber;
#endif  // !_MSC_VER

BankerRequest::BankerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BankerRequest::InitAsDefaultInstance() {
}

BankerRequest::BankerRequest(const BankerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BankerRequest::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  playerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BankerRequest::~BankerRequest() {
  SharedDtor();
}

void BankerRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BankerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BankerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BankerRequest_descriptor_;
}

const BankerRequest& BankerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

BankerRequest* BankerRequest::default_instance_ = NULL;

BankerRequest* BankerRequest::New() const {
  return new BankerRequest;
}

void BankerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
    playerid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BankerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerID;
        break;
      }

      // required int32 playerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BankerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // required int32 playerID = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BankerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // required int32 playerID = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BankerRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // required int32 playerID = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BankerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BankerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BankerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BankerRequest::MergeFrom(const BankerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BankerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BankerRequest::CopyFrom(const BankerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BankerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BankerRequest::Swap(BankerRequest* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BankerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BankerRequest_descriptor_;
  metadata.reflection = BankerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomBankerListMsg_Banker::kPlayerIDFieldNumber;
const int RoomBankerListMsg_Banker::kPlayerMoneyFieldNumber;
const int RoomBankerListMsg_Banker::kPlayerNameFieldNumber;
const int RoomBankerListMsg_Banker::kIsBankerFieldNumber;
#endif  // !_MSC_VER

RoomBankerListMsg_Banker::RoomBankerListMsg_Banker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoomBankerListMsg_Banker::InitAsDefaultInstance() {
}

RoomBankerListMsg_Banker::RoomBankerListMsg_Banker(const RoomBankerListMsg_Banker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoomBankerListMsg_Banker::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0;
  playermoney_ = 0;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isbanker_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomBankerListMsg_Banker::~RoomBankerListMsg_Banker() {
  SharedDtor();
}

void RoomBankerListMsg_Banker::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void RoomBankerListMsg_Banker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomBankerListMsg_Banker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomBankerListMsg_Banker_descriptor_;
}

const RoomBankerListMsg_Banker& RoomBankerListMsg_Banker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

RoomBankerListMsg_Banker* RoomBankerListMsg_Banker::default_instance_ = NULL;

RoomBankerListMsg_Banker* RoomBankerListMsg_Banker::New() const {
  return new RoomBankerListMsg_Banker;
}

void RoomBankerListMsg_Banker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0;
    playermoney_ = 0;
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    isbanker_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomBankerListMsg_Banker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerMoney;
        break;
      }

      // required int32 playerMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playermoney_)));
          set_has_playermoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_playerName;
        break;
      }

      // required string playerName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isBanker;
        break;
      }

      // required bool isBanker = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isBanker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbanker_)));
          set_has_isbanker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoomBankerListMsg_Banker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  // required int32 playerMoney = 2;
  if (has_playermoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playermoney(), output);
  }

  // required string playerName = 3;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->playername(), output);
  }

  // required bool isBanker = 4;
  if (has_isbanker()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isbanker(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoomBankerListMsg_Banker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerid(), target);
  }

  // required int32 playerMoney = 2;
  if (has_playermoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playermoney(), target);
  }

  // required string playerName = 3;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->playername(), target);
  }

  // required bool isBanker = 4;
  if (has_isbanker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isbanker(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoomBankerListMsg_Banker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // required int32 playerMoney = 2;
    if (has_playermoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playermoney());
    }

    // required string playerName = 3;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // required bool isBanker = 4;
    if (has_isbanker()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomBankerListMsg_Banker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomBankerListMsg_Banker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomBankerListMsg_Banker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomBankerListMsg_Banker::MergeFrom(const RoomBankerListMsg_Banker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_playermoney()) {
      set_playermoney(from.playermoney());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_isbanker()) {
      set_isbanker(from.isbanker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomBankerListMsg_Banker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomBankerListMsg_Banker::CopyFrom(const RoomBankerListMsg_Banker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomBankerListMsg_Banker::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RoomBankerListMsg_Banker::Swap(RoomBankerListMsg_Banker* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(playermoney_, other->playermoney_);
    std::swap(playername_, other->playername_);
    std::swap(isbanker_, other->isbanker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomBankerListMsg_Banker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomBankerListMsg_Banker_descriptor_;
  metadata.reflection = RoomBankerListMsg_Banker_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RoomBankerListMsg::kRoomIDFieldNumber;
const int RoomBankerListMsg::kBankerListFieldNumber;
#endif  // !_MSC_VER

RoomBankerListMsg::RoomBankerListMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoomBankerListMsg::InitAsDefaultInstance() {
}

RoomBankerListMsg::RoomBankerListMsg(const RoomBankerListMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoomBankerListMsg::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomBankerListMsg::~RoomBankerListMsg() {
  SharedDtor();
}

void RoomBankerListMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomBankerListMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomBankerListMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomBankerListMsg_descriptor_;
}

const RoomBankerListMsg& RoomBankerListMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

RoomBankerListMsg* RoomBankerListMsg::default_instance_ = NULL;

RoomBankerListMsg* RoomBankerListMsg::New() const {
  return new RoomBankerListMsg;
}

void RoomBankerListMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
  }
  bankerlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomBankerListMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bankerList;
        break;
      }

      // repeated .bullfight.RoomBankerListMsg.Banker bankerList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankerList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bankerlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bankerList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoomBankerListMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // repeated .bullfight.RoomBankerListMsg.Banker bankerList = 2;
  for (int i = 0; i < this->bankerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bankerlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoomBankerListMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // repeated .bullfight.RoomBankerListMsg.Banker bankerList = 2;
  for (int i = 0; i < this->bankerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bankerlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoomBankerListMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  // repeated .bullfight.RoomBankerListMsg.Banker bankerList = 2;
  total_size += 1 * this->bankerlist_size();
  for (int i = 0; i < this->bankerlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bankerlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomBankerListMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomBankerListMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomBankerListMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomBankerListMsg::MergeFrom(const RoomBankerListMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  bankerlist_.MergeFrom(from.bankerlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomBankerListMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomBankerListMsg::CopyFrom(const RoomBankerListMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomBankerListMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < bankerlist_size(); i++) {
    if (!this->bankerlist(i).IsInitialized()) return false;
  }
  return true;
}

void RoomBankerListMsg::Swap(RoomBankerListMsg* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    bankerlist_.Swap(&other->bankerlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomBankerListMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomBankerListMsg_descriptor_;
  metadata.reflection = RoomBankerListMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomStatusMsg::kRoomIDFieldNumber;
const int RoomStatusMsg::kPlayerIDFieldNumber;
const int RoomStatusMsg::kEnterValidFieldNumber;
const int RoomStatusMsg::kCurrentStatusFieldNumber;
const int RoomStatusMsg::kCurrentTimeFieldNumber;
const int RoomStatusMsg::kBHasBankerFieldNumber;
const int RoomStatusMsg::kPokerSetMsgFieldNumber;
const int RoomStatusMsg::kEndMsgFieldNumber;
const int RoomStatusMsg::kPlayerListFieldNumber;
const int RoomStatusMsg::kBankerListFieldNumber;
const int RoomStatusMsg::kStatusFieldNumber;
#endif  // !_MSC_VER

RoomStatusMsg::RoomStatusMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoomStatusMsg::InitAsDefaultInstance() {
  pokersetmsg_ = const_cast< ::bullfight::PokerMsg*>(&::bullfight::PokerMsg::default_instance());
  endmsg_ = const_cast< ::bullfight::RoomBetEndMsg*>(&::bullfight::RoomBetEndMsg::default_instance());
  bankerlist_ = const_cast< ::bullfight::RoomBankerListMsg*>(&::bullfight::RoomBankerListMsg::default_instance());
}

RoomStatusMsg::RoomStatusMsg(const RoomStatusMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoomStatusMsg::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  playerid_ = 0;
  entervalid_ = false;
  currentstatus_ = 0;
  currenttime_ = 0;
  bhasbanker_ = false;
  pokersetmsg_ = NULL;
  endmsg_ = NULL;
  bankerlist_ = NULL;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomStatusMsg::~RoomStatusMsg() {
  SharedDtor();
}

void RoomStatusMsg::SharedDtor() {
  if (this != default_instance_) {
    delete pokersetmsg_;
    delete endmsg_;
    delete bankerlist_;
  }
}

void RoomStatusMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomStatusMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomStatusMsg_descriptor_;
}

const RoomStatusMsg& RoomStatusMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

RoomStatusMsg* RoomStatusMsg::default_instance_ = NULL;

RoomStatusMsg* RoomStatusMsg::New() const {
  return new RoomStatusMsg;
}

void RoomStatusMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
    playerid_ = 0;
    entervalid_ = false;
    currentstatus_ = 0;
    currenttime_ = 0;
    bhasbanker_ = false;
    if (has_pokersetmsg()) {
      if (pokersetmsg_ != NULL) pokersetmsg_->::bullfight::PokerMsg::Clear();
    }
    if (has_endmsg()) {
      if (endmsg_ != NULL) endmsg_->::bullfight::RoomBetEndMsg::Clear();
    }
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (has_bankerlist()) {
      if (bankerlist_ != NULL) bankerlist_->::bullfight::RoomBankerListMsg::Clear();
    }
    status_ = 0;
  }
  playerlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomStatusMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerID;
        break;
      }

      // required int32 playerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_enterValid;
        break;
      }

      // required bool enterValid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enterValid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &entervalid_)));
          set_has_entervalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_currentStatus;
        break;
      }

      // optional int32 currentStatus = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentstatus_)));
          set_has_currentstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_currentTime;
        break;
      }

      // optional int32 currentTime = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currenttime_)));
          set_has_currenttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bHasBanker;
        break;
      }

      // optional bool bHasBanker = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bHasBanker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bhasbanker_)));
          set_has_bhasbanker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_pokerSetMsg;
        break;
      }

      // optional .bullfight.PokerMsg pokerSetMsg = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pokerSetMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pokersetmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_endMsg;
        break;
      }

      // optional .bullfight.RoomBetEndMsg endMsg = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_playerList;
        break;
      }

      // repeated .bullfight.PlayerInfoMsg playerList = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_playerList;
        if (input->ExpectTag(82)) goto parse_bankerList;
        break;
      }

      // optional .bullfight.RoomBankerListMsg bankerList = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankerList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bankerlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_status;
        break;
      }

      // required int32 status = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoomStatusMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // required int32 playerID = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playerid(), output);
  }

  // required bool enterValid = 3;
  if (has_entervalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->entervalid(), output);
  }

  // optional int32 currentStatus = 4 [default = 0];
  if (has_currentstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->currentstatus(), output);
  }

  // optional int32 currentTime = 5 [default = 0];
  if (has_currenttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->currenttime(), output);
  }

  // optional bool bHasBanker = 6 [default = false];
  if (has_bhasbanker()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->bhasbanker(), output);
  }

  // optional .bullfight.PokerMsg pokerSetMsg = 7;
  if (has_pokersetmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->pokersetmsg(), output);
  }

  // optional .bullfight.RoomBetEndMsg endMsg = 8;
  if (has_endmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->endmsg(), output);
  }

  // repeated .bullfight.PlayerInfoMsg playerList = 9;
  for (int i = 0; i < this->playerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->playerlist(i), output);
  }

  // optional .bullfight.RoomBankerListMsg bankerList = 10;
  if (has_bankerlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->bankerlist(), output);
  }

  // required int32 status = 11;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoomStatusMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // required int32 playerID = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playerid(), target);
  }

  // required bool enterValid = 3;
  if (has_entervalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->entervalid(), target);
  }

  // optional int32 currentStatus = 4 [default = 0];
  if (has_currentstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->currentstatus(), target);
  }

  // optional int32 currentTime = 5 [default = 0];
  if (has_currenttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->currenttime(), target);
  }

  // optional bool bHasBanker = 6 [default = false];
  if (has_bhasbanker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->bhasbanker(), target);
  }

  // optional .bullfight.PokerMsg pokerSetMsg = 7;
  if (has_pokersetmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->pokersetmsg(), target);
  }

  // optional .bullfight.RoomBetEndMsg endMsg = 8;
  if (has_endmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->endmsg(), target);
  }

  // repeated .bullfight.PlayerInfoMsg playerList = 9;
  for (int i = 0; i < this->playerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->playerlist(i), target);
  }

  // optional .bullfight.RoomBankerListMsg bankerList = 10;
  if (has_bankerlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->bankerlist(), target);
  }

  // required int32 status = 11;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoomStatusMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // required int32 playerID = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // required bool enterValid = 3;
    if (has_entervalid()) {
      total_size += 1 + 1;
    }

    // optional int32 currentStatus = 4 [default = 0];
    if (has_currentstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentstatus());
    }

    // optional int32 currentTime = 5 [default = 0];
    if (has_currenttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currenttime());
    }

    // optional bool bHasBanker = 6 [default = false];
    if (has_bhasbanker()) {
      total_size += 1 + 1;
    }

    // optional .bullfight.PokerMsg pokerSetMsg = 7;
    if (has_pokersetmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pokersetmsg());
    }

    // optional .bullfight.RoomBetEndMsg endMsg = 8;
    if (has_endmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endmsg());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional .bullfight.RoomBankerListMsg bankerList = 10;
    if (has_bankerlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bankerlist());
    }

    // required int32 status = 11;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  // repeated .bullfight.PlayerInfoMsg playerList = 9;
  total_size += 1 * this->playerlist_size();
  for (int i = 0; i < this->playerlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomStatusMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomStatusMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomStatusMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomStatusMsg::MergeFrom(const RoomStatusMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerlist_.MergeFrom(from.playerlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_entervalid()) {
      set_entervalid(from.entervalid());
    }
    if (from.has_currentstatus()) {
      set_currentstatus(from.currentstatus());
    }
    if (from.has_currenttime()) {
      set_currenttime(from.currenttime());
    }
    if (from.has_bhasbanker()) {
      set_bhasbanker(from.bhasbanker());
    }
    if (from.has_pokersetmsg()) {
      mutable_pokersetmsg()->::bullfight::PokerMsg::MergeFrom(from.pokersetmsg());
    }
    if (from.has_endmsg()) {
      mutable_endmsg()->::bullfight::RoomBetEndMsg::MergeFrom(from.endmsg());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_bankerlist()) {
      mutable_bankerlist()->::bullfight::RoomBankerListMsg::MergeFrom(from.bankerlist());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomStatusMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomStatusMsg::CopyFrom(const RoomStatusMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomStatusMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000407) != 0x00000407) return false;

  if (has_pokersetmsg()) {
    if (!this->pokersetmsg().IsInitialized()) return false;
  }
  if (has_endmsg()) {
    if (!this->endmsg().IsInitialized()) return false;
  }
  for (int i = 0; i < playerlist_size(); i++) {
    if (!this->playerlist(i).IsInitialized()) return false;
  }
  if (has_bankerlist()) {
    if (!this->bankerlist().IsInitialized()) return false;
  }
  return true;
}

void RoomStatusMsg::Swap(RoomStatusMsg* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(playerid_, other->playerid_);
    std::swap(entervalid_, other->entervalid_);
    std::swap(currentstatus_, other->currentstatus_);
    std::swap(currenttime_, other->currenttime_);
    std::swap(bhasbanker_, other->bhasbanker_);
    std::swap(pokersetmsg_, other->pokersetmsg_);
    std::swap(endmsg_, other->endmsg_);
    playerlist_.Swap(&other->playerlist_);
    std::swap(bankerlist_, other->bankerlist_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomStatusMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomStatusMsg_descriptor_;
  metadata.reflection = RoomStatusMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomBetMsg::kRoomIDFieldNumber;
const int RoomBetMsg::kPlayerIDFieldNumber;
const int RoomBetMsg::kBetMoneyFieldNumber;
const int RoomBetMsg::kBetIDFieldNumber;
#endif  // !_MSC_VER

RoomBetMsg::RoomBetMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoomBetMsg::InitAsDefaultInstance() {
}

RoomBetMsg::RoomBetMsg(const RoomBetMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoomBetMsg::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  playerid_ = 0;
  betmoney_ = 0;
  betid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomBetMsg::~RoomBetMsg() {
  SharedDtor();
}

void RoomBetMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomBetMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomBetMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomBetMsg_descriptor_;
}

const RoomBetMsg& RoomBetMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

RoomBetMsg* RoomBetMsg::default_instance_ = NULL;

RoomBetMsg* RoomBetMsg::New() const {
  return new RoomBetMsg;
}

void RoomBetMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
    playerid_ = 0;
    betmoney_ = 0;
    betid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomBetMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerID;
        break;
      }

      // required int32 playerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_betMoney;
        break;
      }

      // required int32 betMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_betMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &betmoney_)));
          set_has_betmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_betID;
        break;
      }

      // required int32 betID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_betID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &betid_)));
          set_has_betid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoomBetMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // required int32 playerID = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playerid(), output);
  }

  // required int32 betMoney = 3;
  if (has_betmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->betmoney(), output);
  }

  // required int32 betID = 4;
  if (has_betid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->betid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoomBetMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // required int32 playerID = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playerid(), target);
  }

  // required int32 betMoney = 3;
  if (has_betmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->betmoney(), target);
  }

  // required int32 betID = 4;
  if (has_betid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->betid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoomBetMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // required int32 playerID = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // required int32 betMoney = 3;
    if (has_betmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->betmoney());
    }

    // required int32 betID = 4;
    if (has_betid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->betid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomBetMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomBetMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomBetMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomBetMsg::MergeFrom(const RoomBetMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_betmoney()) {
      set_betmoney(from.betmoney());
    }
    if (from.has_betid()) {
      set_betid(from.betid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomBetMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomBetMsg::CopyFrom(const RoomBetMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomBetMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RoomBetMsg::Swap(RoomBetMsg* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(playerid_, other->playerid_);
    std::swap(betmoney_, other->betmoney_);
    std::swap(betid_, other->betid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomBetMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomBetMsg_descriptor_;
  metadata.reflection = RoomBetMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomBetTotalMsg::kRoomIDFieldNumber;
const int RoomBetTotalMsg::kPlayerIDFieldNumber;
const int RoomBetTotalMsg::kIsBettedFieldNumber;
const int RoomBetTotalMsg::kIsValidFieldNumber;
const int RoomBetTotalMsg::kBetIDFieldNumber;
const int RoomBetTotalMsg::kBetMoneyFieldNumber;
const int RoomBetTotalMsg::kTotalBetMoneyFieldNumber;
#endif  // !_MSC_VER

RoomBetTotalMsg::RoomBetTotalMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoomBetTotalMsg::InitAsDefaultInstance() {
}

RoomBetTotalMsg::RoomBetTotalMsg(const RoomBetTotalMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoomBetTotalMsg::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  playerid_ = 0;
  isbetted_ = false;
  isvalid_ = false;
  betid_ = 0;
  betmoney_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomBetTotalMsg::~RoomBetTotalMsg() {
  SharedDtor();
}

void RoomBetTotalMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomBetTotalMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomBetTotalMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomBetTotalMsg_descriptor_;
}

const RoomBetTotalMsg& RoomBetTotalMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

RoomBetTotalMsg* RoomBetTotalMsg::default_instance_ = NULL;

RoomBetTotalMsg* RoomBetTotalMsg::New() const {
  return new RoomBetTotalMsg;
}

void RoomBetTotalMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
    playerid_ = 0;
    isbetted_ = false;
    isvalid_ = false;
    betid_ = 0;
    betmoney_ = 0;
  }
  totalbetmoney_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomBetTotalMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerID;
        break;
      }

      // optional int32 playerID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isBetted;
        break;
      }

      // optional bool isBetted = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isBetted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbetted_)));
          set_has_isbetted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isValid;
        break;
      }

      // optional bool isValid = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isValid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvalid_)));
          set_has_isvalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_betID;
        break;
      }

      // optional int32 betID = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_betID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &betid_)));
          set_has_betid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_betMoney;
        break;
      }

      // optional int32 betMoney = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_betMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &betmoney_)));
          set_has_betmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_totalBetMoney;
        break;
      }

      // repeated int32 totalBetMoney = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalBetMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_totalbetmoney())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_totalbetmoney())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_totalBetMoney;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoomBetTotalMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional int32 playerID = 2 [default = 0];
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playerid(), output);
  }

  // optional bool isBetted = 3 [default = false];
  if (has_isbetted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isbetted(), output);
  }

  // optional bool isValid = 4 [default = false];
  if (has_isvalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isvalid(), output);
  }

  // optional int32 betID = 5 [default = 0];
  if (has_betid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->betid(), output);
  }

  // optional int32 betMoney = 6 [default = 0];
  if (has_betmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->betmoney(), output);
  }

  // repeated int32 totalBetMoney = 7;
  for (int i = 0; i < this->totalbetmoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->totalbetmoney(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoomBetTotalMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional int32 playerID = 2 [default = 0];
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playerid(), target);
  }

  // optional bool isBetted = 3 [default = false];
  if (has_isbetted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isbetted(), target);
  }

  // optional bool isValid = 4 [default = false];
  if (has_isvalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isvalid(), target);
  }

  // optional int32 betID = 5 [default = 0];
  if (has_betid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->betid(), target);
  }

  // optional int32 betMoney = 6 [default = 0];
  if (has_betmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->betmoney(), target);
  }

  // repeated int32 totalBetMoney = 7;
  for (int i = 0; i < this->totalbetmoney_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->totalbetmoney(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoomBetTotalMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int32 playerID = 2 [default = 0];
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // optional bool isBetted = 3 [default = false];
    if (has_isbetted()) {
      total_size += 1 + 1;
    }

    // optional bool isValid = 4 [default = false];
    if (has_isvalid()) {
      total_size += 1 + 1;
    }

    // optional int32 betID = 5 [default = 0];
    if (has_betid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->betid());
    }

    // optional int32 betMoney = 6 [default = 0];
    if (has_betmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->betmoney());
    }

  }
  // repeated int32 totalBetMoney = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->totalbetmoney_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->totalbetmoney(i));
    }
    total_size += 1 * this->totalbetmoney_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomBetTotalMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomBetTotalMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomBetTotalMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomBetTotalMsg::MergeFrom(const RoomBetTotalMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  totalbetmoney_.MergeFrom(from.totalbetmoney_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_isbetted()) {
      set_isbetted(from.isbetted());
    }
    if (from.has_isvalid()) {
      set_isvalid(from.isvalid());
    }
    if (from.has_betid()) {
      set_betid(from.betid());
    }
    if (from.has_betmoney()) {
      set_betmoney(from.betmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomBetTotalMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomBetTotalMsg::CopyFrom(const RoomBetTotalMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomBetTotalMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RoomBetTotalMsg::Swap(RoomBetTotalMsg* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(playerid_, other->playerid_);
    std::swap(isbetted_, other->isbetted_);
    std::swap(isvalid_, other->isvalid_);
    std::swap(betid_, other->betid_);
    std::swap(betmoney_, other->betmoney_);
    totalbetmoney_.Swap(&other->totalbetmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomBetTotalMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomBetTotalMsg_descriptor_;
  metadata.reflection = RoomBetTotalMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomStatusTimeCfgRequest::kRoomIDFieldNumber;
const int RoomStatusTimeCfgRequest::kUserIDFieldNumber;
#endif  // !_MSC_VER

RoomStatusTimeCfgRequest::RoomStatusTimeCfgRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoomStatusTimeCfgRequest::InitAsDefaultInstance() {
}

RoomStatusTimeCfgRequest::RoomStatusTimeCfgRequest(const RoomStatusTimeCfgRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoomStatusTimeCfgRequest::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomStatusTimeCfgRequest::~RoomStatusTimeCfgRequest() {
  SharedDtor();
}

void RoomStatusTimeCfgRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomStatusTimeCfgRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomStatusTimeCfgRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomStatusTimeCfgRequest_descriptor_;
}

const RoomStatusTimeCfgRequest& RoomStatusTimeCfgRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

RoomStatusTimeCfgRequest* RoomStatusTimeCfgRequest::default_instance_ = NULL;

RoomStatusTimeCfgRequest* RoomStatusTimeCfgRequest::New() const {
  return new RoomStatusTimeCfgRequest;
}

void RoomStatusTimeCfgRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
    userid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomStatusTimeCfgRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userID;
        break;
      }

      // required int32 userID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoomStatusTimeCfgRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // required int32 userID = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoomStatusTimeCfgRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // required int32 userID = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoomStatusTimeCfgRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // required int32 userID = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomStatusTimeCfgRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomStatusTimeCfgRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomStatusTimeCfgRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomStatusTimeCfgRequest::MergeFrom(const RoomStatusTimeCfgRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomStatusTimeCfgRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomStatusTimeCfgRequest::CopyFrom(const RoomStatusTimeCfgRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomStatusTimeCfgRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RoomStatusTimeCfgRequest::Swap(RoomStatusTimeCfgRequest* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomStatusTimeCfgRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomStatusTimeCfgRequest_descriptor_;
  metadata.reflection = RoomStatusTimeCfgRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomStatusTimeCfgMsg::kRoomIDFieldNumber;
const int RoomStatusTimeCfgMsg::kCurrentStatusFieldNumber;
const int RoomStatusTimeCfgMsg::kCurrentTimeFieldNumber;
#endif  // !_MSC_VER

RoomStatusTimeCfgMsg::RoomStatusTimeCfgMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoomStatusTimeCfgMsg::InitAsDefaultInstance() {
}

RoomStatusTimeCfgMsg::RoomStatusTimeCfgMsg(const RoomStatusTimeCfgMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoomStatusTimeCfgMsg::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  currentstatus_ = 0;
  currenttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomStatusTimeCfgMsg::~RoomStatusTimeCfgMsg() {
  SharedDtor();
}

void RoomStatusTimeCfgMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomStatusTimeCfgMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomStatusTimeCfgMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomStatusTimeCfgMsg_descriptor_;
}

const RoomStatusTimeCfgMsg& RoomStatusTimeCfgMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

RoomStatusTimeCfgMsg* RoomStatusTimeCfgMsg::default_instance_ = NULL;

RoomStatusTimeCfgMsg* RoomStatusTimeCfgMsg::New() const {
  return new RoomStatusTimeCfgMsg;
}

void RoomStatusTimeCfgMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
    currentstatus_ = 0;
    currenttime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomStatusTimeCfgMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_currentStatus;
        break;
      }

      // required int32 currentStatus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentstatus_)));
          set_has_currentstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_currentTime;
        break;
      }

      // required int32 currentTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currenttime_)));
          set_has_currenttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoomStatusTimeCfgMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // required int32 currentStatus = 2;
  if (has_currentstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->currentstatus(), output);
  }

  // required int32 currentTime = 3;
  if (has_currenttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->currenttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoomStatusTimeCfgMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // required int32 currentStatus = 2;
  if (has_currentstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->currentstatus(), target);
  }

  // required int32 currentTime = 3;
  if (has_currenttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->currenttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoomStatusTimeCfgMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // required int32 currentStatus = 2;
    if (has_currentstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentstatus());
    }

    // required int32 currentTime = 3;
    if (has_currenttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currenttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomStatusTimeCfgMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomStatusTimeCfgMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomStatusTimeCfgMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomStatusTimeCfgMsg::MergeFrom(const RoomStatusTimeCfgMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_currentstatus()) {
      set_currentstatus(from.currentstatus());
    }
    if (from.has_currenttime()) {
      set_currenttime(from.currenttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomStatusTimeCfgMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomStatusTimeCfgMsg::CopyFrom(const RoomStatusTimeCfgMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomStatusTimeCfgMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RoomStatusTimeCfgMsg::Swap(RoomStatusTimeCfgMsg* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(currentstatus_, other->currentstatus_);
    std::swap(currenttime_, other->currenttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomStatusTimeCfgMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomStatusTimeCfgMsg_descriptor_;
  metadata.reflection = RoomStatusTimeCfgMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExitRoomMsg::kRoomIDFieldNumber;
const int ExitRoomMsg::kPlayerIDFieldNumber;
#endif  // !_MSC_VER

ExitRoomMsg::ExitRoomMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExitRoomMsg::InitAsDefaultInstance() {
}

ExitRoomMsg::ExitRoomMsg(const ExitRoomMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExitRoomMsg::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  playerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExitRoomMsg::~ExitRoomMsg() {
  SharedDtor();
}

void ExitRoomMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExitRoomMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExitRoomMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExitRoomMsg_descriptor_;
}

const ExitRoomMsg& ExitRoomMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

ExitRoomMsg* ExitRoomMsg::default_instance_ = NULL;

ExitRoomMsg* ExitRoomMsg::New() const {
  return new ExitRoomMsg;
}

void ExitRoomMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
    playerid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExitRoomMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerID;
        break;
      }

      // required int32 playerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExitRoomMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // required int32 playerID = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExitRoomMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomID = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // required int32 playerID = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExitRoomMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // required int32 playerID = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExitRoomMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExitRoomMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExitRoomMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExitRoomMsg::MergeFrom(const ExitRoomMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExitRoomMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExitRoomMsg::CopyFrom(const ExitRoomMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitRoomMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ExitRoomMsg::Swap(ExitRoomMsg* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExitRoomMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExitRoomMsg_descriptor_;
  metadata.reflection = ExitRoomMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace bullfight

// @@protoc_insertion_point(global_scope)
