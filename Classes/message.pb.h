// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace bullfight {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class LoginRequest;
class UserInfoMsg;
class LoginMsg;
class InitRoomRequest;
class RoomInfoMsg;
class RoomListInfoMsg;
class InitRoomMsg;
class RegisterRequest;
class RegisterMsg;
class RefreshRequest;
class RefreshBackMsg;
class EnterRoomRequest;
class PlayerInfoMsg;
class PokerMsg;
class RoomBetEndMsg;
class BankerRequest;
class RoomBankerListMsg;
class RoomBankerListMsg_Banker;
class RoomStatusMsg;
class RoomBetMsg;
class RoomBetTotalMsg;
class RoomStatusTimeCfgRequest;
class RoomStatusTimeCfgMsg;
class ExitRoomMsg;

// ===================================================================

class LoginRequest : public ::google::protobuf::Message {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRequest& default_instance();

  void Swap(LoginRequest* other);

  // implements Message ----------------------------------------------

  LoginRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // required string passwd = 2;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 2;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const char* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // @@protoc_insertion_point(class_scope:bullfight.LoginRequest)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_passwd();
  inline void clear_has_passwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  ::std::string* passwd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static LoginRequest* default_instance_;
};
// -------------------------------------------------------------------

class UserInfoMsg : public ::google::protobuf::Message {
 public:
  UserInfoMsg();
  virtual ~UserInfoMsg();

  UserInfoMsg(const UserInfoMsg& from);

  inline UserInfoMsg& operator=(const UserInfoMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfoMsg& default_instance();

  void Swap(UserInfoMsg* other);

  // implements Message ----------------------------------------------

  UserInfoMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserInfoMsg& from);
  void MergeFrom(const UserInfoMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 userID = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // required int32 userLevel = 2;
  inline bool has_userlevel() const;
  inline void clear_userlevel();
  static const int kUserLevelFieldNumber = 2;
  inline ::google::protobuf::int32 userlevel() const;
  inline void set_userlevel(::google::protobuf::int32 value);

  // required string nickName = 3;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 3;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // required int32 money = 4;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 4;
  inline ::google::protobuf::int32 money() const;
  inline void set_money(::google::protobuf::int32 value);

  // required int32 diamonds = 5;
  inline bool has_diamonds() const;
  inline void clear_diamonds();
  static const int kDiamondsFieldNumber = 5;
  inline ::google::protobuf::int32 diamonds() const;
  inline void set_diamonds(::google::protobuf::int32 value);

  // required int32 VIP = 6;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVIPFieldNumber = 6;
  inline ::google::protobuf::int32 vip() const;
  inline void set_vip(::google::protobuf::int32 value);

  // required int32 userFaceType = 7;
  inline bool has_userfacetype() const;
  inline void clear_userfacetype();
  static const int kUserFaceTypeFieldNumber = 7;
  inline ::google::protobuf::int32 userfacetype() const;
  inline void set_userfacetype(::google::protobuf::int32 value);

  // required int32 userGlamours = 8;
  inline bool has_userglamours() const;
  inline void clear_userglamours();
  static const int kUserGlamoursFieldNumber = 8;
  inline ::google::protobuf::int32 userglamours() const;
  inline void set_userglamours(::google::protobuf::int32 value);

  // required int32 userBankMoney = 9;
  inline bool has_userbankmoney() const;
  inline void clear_userbankmoney();
  static const int kUserBankMoneyFieldNumber = 9;
  inline ::google::protobuf::int32 userbankmoney() const;
  inline void set_userbankmoney(::google::protobuf::int32 value);

  // required int32 userBattleLevel = 10;
  inline bool has_userbattlelevel() const;
  inline void clear_userbattlelevel();
  static const int kUserBattleLevelFieldNumber = 10;
  inline ::google::protobuf::int32 userbattlelevel() const;
  inline void set_userbattlelevel(::google::protobuf::int32 value);

  // required int32 currentExp = 11;
  inline bool has_currentexp() const;
  inline void clear_currentexp();
  static const int kCurrentExpFieldNumber = 11;
  inline ::google::protobuf::int32 currentexp() const;
  inline void set_currentexp(::google::protobuf::int32 value);

  // required int32 sex = 12;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 12;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bullfight.UserInfoMsg)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_userlevel();
  inline void clear_has_userlevel();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_diamonds();
  inline void clear_has_diamonds();
  inline void set_has_vip();
  inline void clear_has_vip();
  inline void set_has_userfacetype();
  inline void clear_has_userfacetype();
  inline void set_has_userglamours();
  inline void clear_has_userglamours();
  inline void set_has_userbankmoney();
  inline void clear_has_userbankmoney();
  inline void set_has_userbattlelevel();
  inline void clear_has_userbattlelevel();
  inline void set_has_currentexp();
  inline void clear_has_currentexp();
  inline void set_has_sex();
  inline void clear_has_sex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 userlevel_;
  ::std::string* nickname_;
  ::google::protobuf::int32 money_;
  ::google::protobuf::int32 diamonds_;
  ::google::protobuf::int32 vip_;
  ::google::protobuf::int32 userfacetype_;
  ::google::protobuf::int32 userglamours_;
  ::google::protobuf::int32 userbankmoney_;
  ::google::protobuf::int32 userbattlelevel_;
  ::google::protobuf::int32 currentexp_;
  ::google::protobuf::int32 sex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static UserInfoMsg* default_instance_;
};
// -------------------------------------------------------------------

class LoginMsg : public ::google::protobuf::Message {
 public:
  LoginMsg();
  virtual ~LoginMsg();

  LoginMsg(const LoginMsg& from);

  inline LoginMsg& operator=(const LoginMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginMsg& default_instance();

  void Swap(LoginMsg* other);

  // implements Message ----------------------------------------------

  LoginMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginMsg& from);
  void MergeFrom(const LoginMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional .bullfight.UserInfoMsg userInfo = 2;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 2;
  inline const ::bullfight::UserInfoMsg& userinfo() const;
  inline ::bullfight::UserInfoMsg* mutable_userinfo();
  inline ::bullfight::UserInfoMsg* release_userinfo();
  inline void set_allocated_userinfo(::bullfight::UserInfoMsg* userinfo);

  // @@protoc_insertion_point(class_scope:bullfight.LoginMsg)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::bullfight::UserInfoMsg* userinfo_;
  ::google::protobuf::int32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static LoginMsg* default_instance_;
};
// -------------------------------------------------------------------

class InitRoomRequest : public ::google::protobuf::Message {
 public:
  InitRoomRequest();
  virtual ~InitRoomRequest();

  InitRoomRequest(const InitRoomRequest& from);

  inline InitRoomRequest& operator=(const InitRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InitRoomRequest& default_instance();

  void Swap(InitRoomRequest* other);

  // implements Message ----------------------------------------------

  InitRoomRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InitRoomRequest& from);
  void MergeFrom(const InitRoomRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 userID = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bullfight.InitRoomRequest)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 userid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static InitRoomRequest* default_instance_;
};
// -------------------------------------------------------------------

class RoomInfoMsg : public ::google::protobuf::Message {
 public:
  RoomInfoMsg();
  virtual ~RoomInfoMsg();

  RoomInfoMsg(const RoomInfoMsg& from);

  inline RoomInfoMsg& operator=(const RoomInfoMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomInfoMsg& default_instance();

  void Swap(RoomInfoMsg* other);

  // implements Message ----------------------------------------------

  RoomInfoMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomInfoMsg& from);
  void MergeFrom(const RoomInfoMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roomID = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIDFieldNumber = 1;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // required int32 roomPNumber = 2;
  inline bool has_roompnumber() const;
  inline void clear_roompnumber();
  static const int kRoomPNumberFieldNumber = 2;
  inline ::google::protobuf::int32 roompnumber() const;
  inline void set_roompnumber(::google::protobuf::int32 value);

  // required int32 roomType = 3;
  inline bool has_roomtype() const;
  inline void clear_roomtype();
  static const int kRoomTypeFieldNumber = 3;
  inline ::google::protobuf::int32 roomtype() const;
  inline void set_roomtype(::google::protobuf::int32 value);

  // required int32 roomLimitType = 4;
  inline bool has_roomlimittype() const;
  inline void clear_roomlimittype();
  static const int kRoomLimitTypeFieldNumber = 4;
  inline ::google::protobuf::int32 roomlimittype() const;
  inline void set_roomlimittype(::google::protobuf::int32 value);

  // required string roomDescribtion = 5;
  inline bool has_roomdescribtion() const;
  inline void clear_roomdescribtion();
  static const int kRoomDescribtionFieldNumber = 5;
  inline const ::std::string& roomdescribtion() const;
  inline void set_roomdescribtion(const ::std::string& value);
  inline void set_roomdescribtion(const char* value);
  inline void set_roomdescribtion(const char* value, size_t size);
  inline ::std::string* mutable_roomdescribtion();
  inline ::std::string* release_roomdescribtion();
  inline void set_allocated_roomdescribtion(::std::string* roomdescribtion);

  // @@protoc_insertion_point(class_scope:bullfight.RoomInfoMsg)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_roompnumber();
  inline void clear_has_roompnumber();
  inline void set_has_roomtype();
  inline void clear_has_roomtype();
  inline void set_has_roomlimittype();
  inline void clear_has_roomlimittype();
  inline void set_has_roomdescribtion();
  inline void clear_has_roomdescribtion();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 roompnumber_;
  ::google::protobuf::int32 roomtype_;
  ::google::protobuf::int32 roomlimittype_;
  ::std::string* roomdescribtion_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static RoomInfoMsg* default_instance_;
};
// -------------------------------------------------------------------

class RoomListInfoMsg : public ::google::protobuf::Message {
 public:
  RoomListInfoMsg();
  virtual ~RoomListInfoMsg();

  RoomListInfoMsg(const RoomListInfoMsg& from);

  inline RoomListInfoMsg& operator=(const RoomListInfoMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomListInfoMsg& default_instance();

  void Swap(RoomListInfoMsg* other);

  // implements Message ----------------------------------------------

  RoomListInfoMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomListInfoMsg& from);
  void MergeFrom(const RoomListInfoMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .bullfight.RoomInfoMsg roomInfo = 1;
  inline int roominfo_size() const;
  inline void clear_roominfo();
  static const int kRoomInfoFieldNumber = 1;
  inline const ::bullfight::RoomInfoMsg& roominfo(int index) const;
  inline ::bullfight::RoomInfoMsg* mutable_roominfo(int index);
  inline ::bullfight::RoomInfoMsg* add_roominfo();
  inline const ::google::protobuf::RepeatedPtrField< ::bullfight::RoomInfoMsg >&
      roominfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::bullfight::RoomInfoMsg >*
      mutable_roominfo();

  // @@protoc_insertion_point(class_scope:bullfight.RoomListInfoMsg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::bullfight::RoomInfoMsg > roominfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static RoomListInfoMsg* default_instance_;
};
// -------------------------------------------------------------------

class InitRoomMsg : public ::google::protobuf::Message {
 public:
  InitRoomMsg();
  virtual ~InitRoomMsg();

  InitRoomMsg(const InitRoomMsg& from);

  inline InitRoomMsg& operator=(const InitRoomMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InitRoomMsg& default_instance();

  void Swap(InitRoomMsg* other);

  // implements Message ----------------------------------------------

  InitRoomMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InitRoomMsg& from);
  void MergeFrom(const InitRoomMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // required int32 userID = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 2;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional .bullfight.RoomListInfoMsg roomListInfo = 3;
  inline bool has_roomlistinfo() const;
  inline void clear_roomlistinfo();
  static const int kRoomListInfoFieldNumber = 3;
  inline const ::bullfight::RoomListInfoMsg& roomlistinfo() const;
  inline ::bullfight::RoomListInfoMsg* mutable_roomlistinfo();
  inline ::bullfight::RoomListInfoMsg* release_roomlistinfo();
  inline void set_allocated_roomlistinfo(::bullfight::RoomListInfoMsg* roomlistinfo);

  // @@protoc_insertion_point(class_scope:bullfight.InitRoomMsg)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_roomlistinfo();
  inline void clear_has_roomlistinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 userid_;
  ::bullfight::RoomListInfoMsg* roomlistinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static InitRoomMsg* default_instance_;
};
// -------------------------------------------------------------------

class RegisterRequest : public ::google::protobuf::Message {
 public:
  RegisterRequest();
  virtual ~RegisterRequest();

  RegisterRequest(const RegisterRequest& from);

  inline RegisterRequest& operator=(const RegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterRequest& default_instance();

  void Swap(RegisterRequest* other);

  // implements Message ----------------------------------------------

  RegisterRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterRequest& from);
  void MergeFrom(const RegisterRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // required string passwd = 2;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 2;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const char* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // required string nickname = 3;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 3;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // @@protoc_insertion_point(class_scope:bullfight.RegisterRequest)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_passwd();
  inline void clear_has_passwd();
  inline void set_has_nickname();
  inline void clear_has_nickname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  ::std::string* passwd_;
  ::std::string* nickname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static RegisterRequest* default_instance_;
};
// -------------------------------------------------------------------

class RegisterMsg : public ::google::protobuf::Message {
 public:
  RegisterMsg();
  virtual ~RegisterMsg();

  RegisterMsg(const RegisterMsg& from);

  inline RegisterMsg& operator=(const RegisterMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterMsg& default_instance();

  void Swap(RegisterMsg* other);

  // implements Message ----------------------------------------------

  RegisterMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterMsg& from);
  void MergeFrom(const RegisterMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional .bullfight.UserInfoMsg userInfo = 2;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 2;
  inline const ::bullfight::UserInfoMsg& userinfo() const;
  inline ::bullfight::UserInfoMsg* mutable_userinfo();
  inline ::bullfight::UserInfoMsg* release_userinfo();
  inline void set_allocated_userinfo(::bullfight::UserInfoMsg* userinfo);

  // @@protoc_insertion_point(class_scope:bullfight.RegisterMsg)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::bullfight::UserInfoMsg* userinfo_;
  ::google::protobuf::int32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static RegisterMsg* default_instance_;
};
// -------------------------------------------------------------------

class RefreshRequest : public ::google::protobuf::Message {
 public:
  RefreshRequest();
  virtual ~RefreshRequest();

  RefreshRequest(const RefreshRequest& from);

  inline RefreshRequest& operator=(const RefreshRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RefreshRequest& default_instance();

  void Swap(RefreshRequest* other);

  // implements Message ----------------------------------------------

  RefreshRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RefreshRequest& from);
  void MergeFrom(const RefreshRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 userID = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bullfight.RefreshRequest)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 userid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static RefreshRequest* default_instance_;
};
// -------------------------------------------------------------------

class RefreshBackMsg : public ::google::protobuf::Message {
 public:
  RefreshBackMsg();
  virtual ~RefreshBackMsg();

  RefreshBackMsg(const RefreshBackMsg& from);

  inline RefreshBackMsg& operator=(const RefreshBackMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RefreshBackMsg& default_instance();

  void Swap(RefreshBackMsg* other);

  // implements Message ----------------------------------------------

  RefreshBackMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RefreshBackMsg& from);
  void MergeFrom(const RefreshBackMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // required int32 userID = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 2;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // required .bullfight.UserInfoMsg userInfo = 3;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 3;
  inline const ::bullfight::UserInfoMsg& userinfo() const;
  inline ::bullfight::UserInfoMsg* mutable_userinfo();
  inline ::bullfight::UserInfoMsg* release_userinfo();
  inline void set_allocated_userinfo(::bullfight::UserInfoMsg* userinfo);

  // optional .bullfight.RoomListInfoMsg roomListInfo = 4;
  inline bool has_roomlistinfo() const;
  inline void clear_roomlistinfo();
  static const int kRoomListInfoFieldNumber = 4;
  inline const ::bullfight::RoomListInfoMsg& roomlistinfo() const;
  inline ::bullfight::RoomListInfoMsg* mutable_roomlistinfo();
  inline ::bullfight::RoomListInfoMsg* release_roomlistinfo();
  inline void set_allocated_roomlistinfo(::bullfight::RoomListInfoMsg* roomlistinfo);

  // @@protoc_insertion_point(class_scope:bullfight.RefreshBackMsg)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_roomlistinfo();
  inline void clear_has_roomlistinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 userid_;
  ::bullfight::UserInfoMsg* userinfo_;
  ::bullfight::RoomListInfoMsg* roomlistinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static RefreshBackMsg* default_instance_;
};
// -------------------------------------------------------------------

class EnterRoomRequest : public ::google::protobuf::Message {
 public:
  EnterRoomRequest();
  virtual ~EnterRoomRequest();

  EnterRoomRequest(const EnterRoomRequest& from);

  inline EnterRoomRequest& operator=(const EnterRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterRoomRequest& default_instance();

  void Swap(EnterRoomRequest* other);

  // implements Message ----------------------------------------------

  EnterRoomRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnterRoomRequest& from);
  void MergeFrom(const EnterRoomRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roomID = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIDFieldNumber = 1;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // required int32 userID = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 2;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bullfight.EnterRoomRequest)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 userid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static EnterRoomRequest* default_instance_;
};
// -------------------------------------------------------------------

class PlayerInfoMsg : public ::google::protobuf::Message {
 public:
  PlayerInfoMsg();
  virtual ~PlayerInfoMsg();

  PlayerInfoMsg(const PlayerInfoMsg& from);

  inline PlayerInfoMsg& operator=(const PlayerInfoMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerInfoMsg& default_instance();

  void Swap(PlayerInfoMsg* other);

  // implements Message ----------------------------------------------

  PlayerInfoMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerInfoMsg& from);
  void MergeFrom(const PlayerInfoMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 playerID = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // required int32 playerMoney = 2;
  inline bool has_playermoney() const;
  inline void clear_playermoney();
  static const int kPlayerMoneyFieldNumber = 2;
  inline ::google::protobuf::int32 playermoney() const;
  inline void set_playermoney(::google::protobuf::int32 value);

  // required int32 playerDiamond = 3;
  inline bool has_playerdiamond() const;
  inline void clear_playerdiamond();
  static const int kPlayerDiamondFieldNumber = 3;
  inline ::google::protobuf::int32 playerdiamond() const;
  inline void set_playerdiamond(::google::protobuf::int32 value);

  // required string playerNickName = 4;
  inline bool has_playernickname() const;
  inline void clear_playernickname();
  static const int kPlayerNickNameFieldNumber = 4;
  inline const ::std::string& playernickname() const;
  inline void set_playernickname(const ::std::string& value);
  inline void set_playernickname(const char* value);
  inline void set_playernickname(const char* value, size_t size);
  inline ::std::string* mutable_playernickname();
  inline ::std::string* release_playernickname();
  inline void set_allocated_playernickname(::std::string* playernickname);

  // required int32 playerLevel = 5;
  inline bool has_playerlevel() const;
  inline void clear_playerlevel();
  static const int kPlayerLevelFieldNumber = 5;
  inline ::google::protobuf::int32 playerlevel() const;
  inline void set_playerlevel(::google::protobuf::int32 value);

  // required int32 currentExp = 6;
  inline bool has_currentexp() const;
  inline void clear_currentexp();
  static const int kCurrentExpFieldNumber = 6;
  inline ::google::protobuf::int32 currentexp() const;
  inline void set_currentexp(::google::protobuf::int32 value);

  // required int32 battleLevel = 7;
  inline bool has_battlelevel() const;
  inline void clear_battlelevel();
  static const int kBattleLevelFieldNumber = 7;
  inline ::google::protobuf::int32 battlelevel() const;
  inline void set_battlelevel(::google::protobuf::int32 value);

  // required int32 playerGlamour = 8;
  inline bool has_playerglamour() const;
  inline void clear_playerglamour();
  static const int kPlayerGlamourFieldNumber = 8;
  inline ::google::protobuf::int32 playerglamour() const;
  inline void set_playerglamour(::google::protobuf::int32 value);

  // required int32 playerFaceType = 9;
  inline bool has_playerfacetype() const;
  inline void clear_playerfacetype();
  static const int kPlayerFaceTypeFieldNumber = 9;
  inline ::google::protobuf::int32 playerfacetype() const;
  inline void set_playerfacetype(::google::protobuf::int32 value);

  // required int32 playerVIPLevel = 10;
  inline bool has_playerviplevel() const;
  inline void clear_playerviplevel();
  static const int kPlayerVIPLevelFieldNumber = 10;
  inline ::google::protobuf::int32 playerviplevel() const;
  inline void set_playerviplevel(::google::protobuf::int32 value);

  // optional bool hasFamily = 11 [default = false];
  inline bool has_hasfamily() const;
  inline void clear_hasfamily();
  static const int kHasFamilyFieldNumber = 11;
  inline bool hasfamily() const;
  inline void set_hasfamily(bool value);

  // optional string playerFamily = 12 [default = ""];
  inline bool has_playerfamily() const;
  inline void clear_playerfamily();
  static const int kPlayerFamilyFieldNumber = 12;
  inline const ::std::string& playerfamily() const;
  inline void set_playerfamily(const ::std::string& value);
  inline void set_playerfamily(const char* value);
  inline void set_playerfamily(const char* value, size_t size);
  inline ::std::string* mutable_playerfamily();
  inline ::std::string* release_playerfamily();
  inline void set_allocated_playerfamily(::std::string* playerfamily);

  // @@protoc_insertion_point(class_scope:bullfight.PlayerInfoMsg)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_playermoney();
  inline void clear_has_playermoney();
  inline void set_has_playerdiamond();
  inline void clear_has_playerdiamond();
  inline void set_has_playernickname();
  inline void clear_has_playernickname();
  inline void set_has_playerlevel();
  inline void clear_has_playerlevel();
  inline void set_has_currentexp();
  inline void clear_has_currentexp();
  inline void set_has_battlelevel();
  inline void clear_has_battlelevel();
  inline void set_has_playerglamour();
  inline void clear_has_playerglamour();
  inline void set_has_playerfacetype();
  inline void clear_has_playerfacetype();
  inline void set_has_playerviplevel();
  inline void clear_has_playerviplevel();
  inline void set_has_hasfamily();
  inline void clear_has_hasfamily();
  inline void set_has_playerfamily();
  inline void clear_has_playerfamily();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 playerid_;
  ::google::protobuf::int32 playermoney_;
  ::std::string* playernickname_;
  ::google::protobuf::int32 playerdiamond_;
  ::google::protobuf::int32 playerlevel_;
  ::google::protobuf::int32 currentexp_;
  ::google::protobuf::int32 battlelevel_;
  ::google::protobuf::int32 playerglamour_;
  ::google::protobuf::int32 playerfacetype_;
  ::google::protobuf::int32 playerviplevel_;
  bool hasfamily_;
  ::std::string* playerfamily_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static PlayerInfoMsg* default_instance_;
};
// -------------------------------------------------------------------

class PokerMsg : public ::google::protobuf::Message {
 public:
  PokerMsg();
  virtual ~PokerMsg();

  PokerMsg(const PokerMsg& from);

  inline PokerMsg& operator=(const PokerMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PokerMsg& default_instance();

  void Swap(PokerMsg* other);

  // implements Message ----------------------------------------------

  PokerMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PokerMsg& from);
  void MergeFrom(const PokerMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roomID = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIDFieldNumber = 1;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // repeated int32 pokerValue = 2;
  inline int pokervalue_size() const;
  inline void clear_pokervalue();
  static const int kPokerValueFieldNumber = 2;
  inline ::google::protobuf::int32 pokervalue(int index) const;
  inline void set_pokervalue(int index, ::google::protobuf::int32 value);
  inline void add_pokervalue(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pokervalue() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pokervalue();

  // @@protoc_insertion_point(class_scope:bullfight.PokerMsg)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pokervalue_;
  ::google::protobuf::int32 roomid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static PokerMsg* default_instance_;
};
// -------------------------------------------------------------------

class RoomBetEndMsg : public ::google::protobuf::Message {
 public:
  RoomBetEndMsg();
  virtual ~RoomBetEndMsg();

  RoomBetEndMsg(const RoomBetEndMsg& from);

  inline RoomBetEndMsg& operator=(const RoomBetEndMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomBetEndMsg& default_instance();

  void Swap(RoomBetEndMsg* other);

  // implements Message ----------------------------------------------

  RoomBetEndMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomBetEndMsg& from);
  void MergeFrom(const RoomBetEndMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roomID = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIDFieldNumber = 1;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // required int32 bankerWinMoney = 2;
  inline bool has_bankerwinmoney() const;
  inline void clear_bankerwinmoney();
  static const int kBankerWinMoneyFieldNumber = 2;
  inline ::google::protobuf::int32 bankerwinmoney() const;
  inline void set_bankerwinmoney(::google::protobuf::int32 value);

  // required int32 playerWinMoney = 3;
  inline bool has_playerwinmoney() const;
  inline void clear_playerwinmoney();
  static const int kPlayerWinMoneyFieldNumber = 3;
  inline ::google::protobuf::int32 playerwinmoney() const;
  inline void set_playerwinmoney(::google::protobuf::int32 value);

  // repeated int32 playerBetWinMoney = 4;
  inline int playerbetwinmoney_size() const;
  inline void clear_playerbetwinmoney();
  static const int kPlayerBetWinMoneyFieldNumber = 4;
  inline ::google::protobuf::int32 playerbetwinmoney(int index) const;
  inline void set_playerbetwinmoney(int index, ::google::protobuf::int32 value);
  inline void add_playerbetwinmoney(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      playerbetwinmoney() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_playerbetwinmoney();

  // optional bool bIsBanker = 5 [default = false];
  inline bool has_bisbanker() const;
  inline void clear_bisbanker();
  static const int kBIsBankerFieldNumber = 5;
  inline bool bisbanker() const;
  inline void set_bisbanker(bool value);

  // @@protoc_insertion_point(class_scope:bullfight.RoomBetEndMsg)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_bankerwinmoney();
  inline void clear_has_bankerwinmoney();
  inline void set_has_playerwinmoney();
  inline void clear_has_playerwinmoney();
  inline void set_has_bisbanker();
  inline void clear_has_bisbanker();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 bankerwinmoney_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > playerbetwinmoney_;
  ::google::protobuf::int32 playerwinmoney_;
  bool bisbanker_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static RoomBetEndMsg* default_instance_;
};
// -------------------------------------------------------------------

class BankerRequest : public ::google::protobuf::Message {
 public:
  BankerRequest();
  virtual ~BankerRequest();

  BankerRequest(const BankerRequest& from);

  inline BankerRequest& operator=(const BankerRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BankerRequest& default_instance();

  void Swap(BankerRequest* other);

  // implements Message ----------------------------------------------

  BankerRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BankerRequest& from);
  void MergeFrom(const BankerRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roomID = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIDFieldNumber = 1;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // required int32 playerID = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 2;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bullfight.BankerRequest)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static BankerRequest* default_instance_;
};
// -------------------------------------------------------------------

class RoomBankerListMsg_Banker : public ::google::protobuf::Message {
 public:
  RoomBankerListMsg_Banker();
  virtual ~RoomBankerListMsg_Banker();

  RoomBankerListMsg_Banker(const RoomBankerListMsg_Banker& from);

  inline RoomBankerListMsg_Banker& operator=(const RoomBankerListMsg_Banker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomBankerListMsg_Banker& default_instance();

  void Swap(RoomBankerListMsg_Banker* other);

  // implements Message ----------------------------------------------

  RoomBankerListMsg_Banker* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomBankerListMsg_Banker& from);
  void MergeFrom(const RoomBankerListMsg_Banker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 playerID = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // required int32 playerMoney = 2;
  inline bool has_playermoney() const;
  inline void clear_playermoney();
  static const int kPlayerMoneyFieldNumber = 2;
  inline ::google::protobuf::int32 playermoney() const;
  inline void set_playermoney(::google::protobuf::int32 value);

  // required string playerName = 3;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 3;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // required bool isBanker = 4;
  inline bool has_isbanker() const;
  inline void clear_isbanker();
  static const int kIsBankerFieldNumber = 4;
  inline bool isbanker() const;
  inline void set_isbanker(bool value);

  // @@protoc_insertion_point(class_scope:bullfight.RoomBankerListMsg.Banker)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_playermoney();
  inline void clear_has_playermoney();
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_isbanker();
  inline void clear_has_isbanker();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 playerid_;
  ::google::protobuf::int32 playermoney_;
  ::std::string* playername_;
  bool isbanker_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static RoomBankerListMsg_Banker* default_instance_;
};
// -------------------------------------------------------------------

class RoomBankerListMsg : public ::google::protobuf::Message {
 public:
  RoomBankerListMsg();
  virtual ~RoomBankerListMsg();

  RoomBankerListMsg(const RoomBankerListMsg& from);

  inline RoomBankerListMsg& operator=(const RoomBankerListMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomBankerListMsg& default_instance();

  void Swap(RoomBankerListMsg* other);

  // implements Message ----------------------------------------------

  RoomBankerListMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomBankerListMsg& from);
  void MergeFrom(const RoomBankerListMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RoomBankerListMsg_Banker Banker;

  // accessors -------------------------------------------------------

  // required int32 roomID = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIDFieldNumber = 1;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // repeated .bullfight.RoomBankerListMsg.Banker bankerList = 2;
  inline int bankerlist_size() const;
  inline void clear_bankerlist();
  static const int kBankerListFieldNumber = 2;
  inline const ::bullfight::RoomBankerListMsg_Banker& bankerlist(int index) const;
  inline ::bullfight::RoomBankerListMsg_Banker* mutable_bankerlist(int index);
  inline ::bullfight::RoomBankerListMsg_Banker* add_bankerlist();
  inline const ::google::protobuf::RepeatedPtrField< ::bullfight::RoomBankerListMsg_Banker >&
      bankerlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::bullfight::RoomBankerListMsg_Banker >*
      mutable_bankerlist();

  // @@protoc_insertion_point(class_scope:bullfight.RoomBankerListMsg)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::bullfight::RoomBankerListMsg_Banker > bankerlist_;
  ::google::protobuf::int32 roomid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static RoomBankerListMsg* default_instance_;
};
// -------------------------------------------------------------------

class RoomStatusMsg : public ::google::protobuf::Message {
 public:
  RoomStatusMsg();
  virtual ~RoomStatusMsg();

  RoomStatusMsg(const RoomStatusMsg& from);

  inline RoomStatusMsg& operator=(const RoomStatusMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomStatusMsg& default_instance();

  void Swap(RoomStatusMsg* other);

  // implements Message ----------------------------------------------

  RoomStatusMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomStatusMsg& from);
  void MergeFrom(const RoomStatusMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roomID = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIDFieldNumber = 1;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // required int32 playerID = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 2;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // required bool enterValid = 3;
  inline bool has_entervalid() const;
  inline void clear_entervalid();
  static const int kEnterValidFieldNumber = 3;
  inline bool entervalid() const;
  inline void set_entervalid(bool value);

  // optional int32 currentStatus = 4 [default = 0];
  inline bool has_currentstatus() const;
  inline void clear_currentstatus();
  static const int kCurrentStatusFieldNumber = 4;
  inline ::google::protobuf::int32 currentstatus() const;
  inline void set_currentstatus(::google::protobuf::int32 value);

  // optional int32 currentTime = 5 [default = 0];
  inline bool has_currenttime() const;
  inline void clear_currenttime();
  static const int kCurrentTimeFieldNumber = 5;
  inline ::google::protobuf::int32 currenttime() const;
  inline void set_currenttime(::google::protobuf::int32 value);

  // optional bool bHasBanker = 6 [default = false];
  inline bool has_bhasbanker() const;
  inline void clear_bhasbanker();
  static const int kBHasBankerFieldNumber = 6;
  inline bool bhasbanker() const;
  inline void set_bhasbanker(bool value);

  // optional .bullfight.PokerMsg pokerSetMsg = 7;
  inline bool has_pokersetmsg() const;
  inline void clear_pokersetmsg();
  static const int kPokerSetMsgFieldNumber = 7;
  inline const ::bullfight::PokerMsg& pokersetmsg() const;
  inline ::bullfight::PokerMsg* mutable_pokersetmsg();
  inline ::bullfight::PokerMsg* release_pokersetmsg();
  inline void set_allocated_pokersetmsg(::bullfight::PokerMsg* pokersetmsg);

  // optional .bullfight.RoomBetEndMsg endMsg = 8;
  inline bool has_endmsg() const;
  inline void clear_endmsg();
  static const int kEndMsgFieldNumber = 8;
  inline const ::bullfight::RoomBetEndMsg& endmsg() const;
  inline ::bullfight::RoomBetEndMsg* mutable_endmsg();
  inline ::bullfight::RoomBetEndMsg* release_endmsg();
  inline void set_allocated_endmsg(::bullfight::RoomBetEndMsg* endmsg);

  // repeated .bullfight.PlayerInfoMsg playerList = 9;
  inline int playerlist_size() const;
  inline void clear_playerlist();
  static const int kPlayerListFieldNumber = 9;
  inline const ::bullfight::PlayerInfoMsg& playerlist(int index) const;
  inline ::bullfight::PlayerInfoMsg* mutable_playerlist(int index);
  inline ::bullfight::PlayerInfoMsg* add_playerlist();
  inline const ::google::protobuf::RepeatedPtrField< ::bullfight::PlayerInfoMsg >&
      playerlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::bullfight::PlayerInfoMsg >*
      mutable_playerlist();

  // optional .bullfight.RoomBankerListMsg bankerList = 10;
  inline bool has_bankerlist() const;
  inline void clear_bankerlist();
  static const int kBankerListFieldNumber = 10;
  inline const ::bullfight::RoomBankerListMsg& bankerlist() const;
  inline ::bullfight::RoomBankerListMsg* mutable_bankerlist();
  inline ::bullfight::RoomBankerListMsg* release_bankerlist();
  inline void set_allocated_bankerlist(::bullfight::RoomBankerListMsg* bankerlist);

  // required int32 status = 11;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 11;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bullfight.RoomStatusMsg)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_entervalid();
  inline void clear_has_entervalid();
  inline void set_has_currentstatus();
  inline void clear_has_currentstatus();
  inline void set_has_currenttime();
  inline void clear_has_currenttime();
  inline void set_has_bhasbanker();
  inline void clear_has_bhasbanker();
  inline void set_has_pokersetmsg();
  inline void clear_has_pokersetmsg();
  inline void set_has_endmsg();
  inline void clear_has_endmsg();
  inline void set_has_bankerlist();
  inline void clear_has_bankerlist();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 playerid_;
  ::google::protobuf::int32 currentstatus_;
  bool entervalid_;
  bool bhasbanker_;
  ::bullfight::PokerMsg* pokersetmsg_;
  ::bullfight::RoomBetEndMsg* endmsg_;
  ::google::protobuf::int32 currenttime_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::RepeatedPtrField< ::bullfight::PlayerInfoMsg > playerlist_;
  ::bullfight::RoomBankerListMsg* bankerlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static RoomStatusMsg* default_instance_;
};
// -------------------------------------------------------------------

class RoomBetMsg : public ::google::protobuf::Message {
 public:
  RoomBetMsg();
  virtual ~RoomBetMsg();

  RoomBetMsg(const RoomBetMsg& from);

  inline RoomBetMsg& operator=(const RoomBetMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomBetMsg& default_instance();

  void Swap(RoomBetMsg* other);

  // implements Message ----------------------------------------------

  RoomBetMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomBetMsg& from);
  void MergeFrom(const RoomBetMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roomID = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIDFieldNumber = 1;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // required int32 playerID = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 2;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // required int32 betMoney = 3;
  inline bool has_betmoney() const;
  inline void clear_betmoney();
  static const int kBetMoneyFieldNumber = 3;
  inline ::google::protobuf::int32 betmoney() const;
  inline void set_betmoney(::google::protobuf::int32 value);

  // required int32 betID = 4;
  inline bool has_betid() const;
  inline void clear_betid();
  static const int kBetIDFieldNumber = 4;
  inline ::google::protobuf::int32 betid() const;
  inline void set_betid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bullfight.RoomBetMsg)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_betmoney();
  inline void clear_has_betmoney();
  inline void set_has_betid();
  inline void clear_has_betid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 playerid_;
  ::google::protobuf::int32 betmoney_;
  ::google::protobuf::int32 betid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static RoomBetMsg* default_instance_;
};
// -------------------------------------------------------------------

class RoomBetTotalMsg : public ::google::protobuf::Message {
 public:
  RoomBetTotalMsg();
  virtual ~RoomBetTotalMsg();

  RoomBetTotalMsg(const RoomBetTotalMsg& from);

  inline RoomBetTotalMsg& operator=(const RoomBetTotalMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomBetTotalMsg& default_instance();

  void Swap(RoomBetTotalMsg* other);

  // implements Message ----------------------------------------------

  RoomBetTotalMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomBetTotalMsg& from);
  void MergeFrom(const RoomBetTotalMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roomID = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIDFieldNumber = 1;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // optional int32 playerID = 2 [default = 0];
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 2;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // optional bool isBetted = 3 [default = false];
  inline bool has_isbetted() const;
  inline void clear_isbetted();
  static const int kIsBettedFieldNumber = 3;
  inline bool isbetted() const;
  inline void set_isbetted(bool value);

  // optional bool isValid = 4 [default = false];
  inline bool has_isvalid() const;
  inline void clear_isvalid();
  static const int kIsValidFieldNumber = 4;
  inline bool isvalid() const;
  inline void set_isvalid(bool value);

  // optional int32 betID = 5 [default = 0];
  inline bool has_betid() const;
  inline void clear_betid();
  static const int kBetIDFieldNumber = 5;
  inline ::google::protobuf::int32 betid() const;
  inline void set_betid(::google::protobuf::int32 value);

  // optional int32 betMoney = 6 [default = 0];
  inline bool has_betmoney() const;
  inline void clear_betmoney();
  static const int kBetMoneyFieldNumber = 6;
  inline ::google::protobuf::int32 betmoney() const;
  inline void set_betmoney(::google::protobuf::int32 value);

  // repeated int32 totalBetMoney = 7;
  inline int totalbetmoney_size() const;
  inline void clear_totalbetmoney();
  static const int kTotalBetMoneyFieldNumber = 7;
  inline ::google::protobuf::int32 totalbetmoney(int index) const;
  inline void set_totalbetmoney(int index, ::google::protobuf::int32 value);
  inline void add_totalbetmoney(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      totalbetmoney() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_totalbetmoney();

  // @@protoc_insertion_point(class_scope:bullfight.RoomBetTotalMsg)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_isbetted();
  inline void clear_has_isbetted();
  inline void set_has_isvalid();
  inline void clear_has_isvalid();
  inline void set_has_betid();
  inline void clear_has_betid();
  inline void set_has_betmoney();
  inline void clear_has_betmoney();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 playerid_;
  bool isbetted_;
  bool isvalid_;
  ::google::protobuf::int32 betid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > totalbetmoney_;
  ::google::protobuf::int32 betmoney_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static RoomBetTotalMsg* default_instance_;
};
// -------------------------------------------------------------------

class RoomStatusTimeCfgRequest : public ::google::protobuf::Message {
 public:
  RoomStatusTimeCfgRequest();
  virtual ~RoomStatusTimeCfgRequest();

  RoomStatusTimeCfgRequest(const RoomStatusTimeCfgRequest& from);

  inline RoomStatusTimeCfgRequest& operator=(const RoomStatusTimeCfgRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomStatusTimeCfgRequest& default_instance();

  void Swap(RoomStatusTimeCfgRequest* other);

  // implements Message ----------------------------------------------

  RoomStatusTimeCfgRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomStatusTimeCfgRequest& from);
  void MergeFrom(const RoomStatusTimeCfgRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roomID = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIDFieldNumber = 1;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // required int32 userID = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 2;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bullfight.RoomStatusTimeCfgRequest)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 userid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static RoomStatusTimeCfgRequest* default_instance_;
};
// -------------------------------------------------------------------

class RoomStatusTimeCfgMsg : public ::google::protobuf::Message {
 public:
  RoomStatusTimeCfgMsg();
  virtual ~RoomStatusTimeCfgMsg();

  RoomStatusTimeCfgMsg(const RoomStatusTimeCfgMsg& from);

  inline RoomStatusTimeCfgMsg& operator=(const RoomStatusTimeCfgMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomStatusTimeCfgMsg& default_instance();

  void Swap(RoomStatusTimeCfgMsg* other);

  // implements Message ----------------------------------------------

  RoomStatusTimeCfgMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomStatusTimeCfgMsg& from);
  void MergeFrom(const RoomStatusTimeCfgMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roomID = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIDFieldNumber = 1;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // required int32 currentStatus = 2;
  inline bool has_currentstatus() const;
  inline void clear_currentstatus();
  static const int kCurrentStatusFieldNumber = 2;
  inline ::google::protobuf::int32 currentstatus() const;
  inline void set_currentstatus(::google::protobuf::int32 value);

  // required int32 currentTime = 3;
  inline bool has_currenttime() const;
  inline void clear_currenttime();
  static const int kCurrentTimeFieldNumber = 3;
  inline ::google::protobuf::int32 currenttime() const;
  inline void set_currenttime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bullfight.RoomStatusTimeCfgMsg)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_currentstatus();
  inline void clear_has_currentstatus();
  inline void set_has_currenttime();
  inline void clear_has_currenttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 currentstatus_;
  ::google::protobuf::int32 currenttime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static RoomStatusTimeCfgMsg* default_instance_;
};
// -------------------------------------------------------------------

class ExitRoomMsg : public ::google::protobuf::Message {
 public:
  ExitRoomMsg();
  virtual ~ExitRoomMsg();

  ExitRoomMsg(const ExitRoomMsg& from);

  inline ExitRoomMsg& operator=(const ExitRoomMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExitRoomMsg& default_instance();

  void Swap(ExitRoomMsg* other);

  // implements Message ----------------------------------------------

  ExitRoomMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExitRoomMsg& from);
  void MergeFrom(const ExitRoomMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roomID = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIDFieldNumber = 1;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // required int32 playerID = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 2;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bullfight.ExitRoomMsg)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static ExitRoomMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// LoginRequest

// required string username = 1;
inline bool LoginRequest::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRequest::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRequest::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& LoginRequest::username() const {
  return *username_;
}
inline void LoginRequest::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void LoginRequest::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void LoginRequest::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRequest::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* LoginRequest::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRequest::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string passwd = 2;
inline bool LoginRequest::has_passwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRequest::set_has_passwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRequest::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRequest::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& LoginRequest::passwd() const {
  return *passwd_;
}
inline void LoginRequest::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
}
inline void LoginRequest::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
}
inline void LoginRequest::set_passwd(const char* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRequest::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  return passwd_;
}
inline ::std::string* LoginRequest::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRequest::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// UserInfoMsg

// required int32 userID = 1;
inline bool UserInfoMsg::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserInfoMsg::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserInfoMsg::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserInfoMsg::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 UserInfoMsg::userid() const {
  return userid_;
}
inline void UserInfoMsg::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// required int32 userLevel = 2;
inline bool UserInfoMsg::has_userlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserInfoMsg::set_has_userlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserInfoMsg::clear_has_userlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserInfoMsg::clear_userlevel() {
  userlevel_ = 0;
  clear_has_userlevel();
}
inline ::google::protobuf::int32 UserInfoMsg::userlevel() const {
  return userlevel_;
}
inline void UserInfoMsg::set_userlevel(::google::protobuf::int32 value) {
  set_has_userlevel();
  userlevel_ = value;
}

// required string nickName = 3;
inline bool UserInfoMsg::has_nickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserInfoMsg::set_has_nickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserInfoMsg::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserInfoMsg::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& UserInfoMsg::nickname() const {
  return *nickname_;
}
inline void UserInfoMsg::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void UserInfoMsg::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void UserInfoMsg::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInfoMsg::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* UserInfoMsg::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserInfoMsg::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 money = 4;
inline bool UserInfoMsg::has_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserInfoMsg::set_has_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserInfoMsg::clear_has_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserInfoMsg::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 UserInfoMsg::money() const {
  return money_;
}
inline void UserInfoMsg::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
}

// required int32 diamonds = 5;
inline bool UserInfoMsg::has_diamonds() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserInfoMsg::set_has_diamonds() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserInfoMsg::clear_has_diamonds() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserInfoMsg::clear_diamonds() {
  diamonds_ = 0;
  clear_has_diamonds();
}
inline ::google::protobuf::int32 UserInfoMsg::diamonds() const {
  return diamonds_;
}
inline void UserInfoMsg::set_diamonds(::google::protobuf::int32 value) {
  set_has_diamonds();
  diamonds_ = value;
}

// required int32 VIP = 6;
inline bool UserInfoMsg::has_vip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserInfoMsg::set_has_vip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserInfoMsg::clear_has_vip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserInfoMsg::clear_vip() {
  vip_ = 0;
  clear_has_vip();
}
inline ::google::protobuf::int32 UserInfoMsg::vip() const {
  return vip_;
}
inline void UserInfoMsg::set_vip(::google::protobuf::int32 value) {
  set_has_vip();
  vip_ = value;
}

// required int32 userFaceType = 7;
inline bool UserInfoMsg::has_userfacetype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserInfoMsg::set_has_userfacetype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserInfoMsg::clear_has_userfacetype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserInfoMsg::clear_userfacetype() {
  userfacetype_ = 0;
  clear_has_userfacetype();
}
inline ::google::protobuf::int32 UserInfoMsg::userfacetype() const {
  return userfacetype_;
}
inline void UserInfoMsg::set_userfacetype(::google::protobuf::int32 value) {
  set_has_userfacetype();
  userfacetype_ = value;
}

// required int32 userGlamours = 8;
inline bool UserInfoMsg::has_userglamours() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserInfoMsg::set_has_userglamours() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserInfoMsg::clear_has_userglamours() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserInfoMsg::clear_userglamours() {
  userglamours_ = 0;
  clear_has_userglamours();
}
inline ::google::protobuf::int32 UserInfoMsg::userglamours() const {
  return userglamours_;
}
inline void UserInfoMsg::set_userglamours(::google::protobuf::int32 value) {
  set_has_userglamours();
  userglamours_ = value;
}

// required int32 userBankMoney = 9;
inline bool UserInfoMsg::has_userbankmoney() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserInfoMsg::set_has_userbankmoney() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserInfoMsg::clear_has_userbankmoney() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserInfoMsg::clear_userbankmoney() {
  userbankmoney_ = 0;
  clear_has_userbankmoney();
}
inline ::google::protobuf::int32 UserInfoMsg::userbankmoney() const {
  return userbankmoney_;
}
inline void UserInfoMsg::set_userbankmoney(::google::protobuf::int32 value) {
  set_has_userbankmoney();
  userbankmoney_ = value;
}

// required int32 userBattleLevel = 10;
inline bool UserInfoMsg::has_userbattlelevel() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserInfoMsg::set_has_userbattlelevel() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserInfoMsg::clear_has_userbattlelevel() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserInfoMsg::clear_userbattlelevel() {
  userbattlelevel_ = 0;
  clear_has_userbattlelevel();
}
inline ::google::protobuf::int32 UserInfoMsg::userbattlelevel() const {
  return userbattlelevel_;
}
inline void UserInfoMsg::set_userbattlelevel(::google::protobuf::int32 value) {
  set_has_userbattlelevel();
  userbattlelevel_ = value;
}

// required int32 currentExp = 11;
inline bool UserInfoMsg::has_currentexp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UserInfoMsg::set_has_currentexp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UserInfoMsg::clear_has_currentexp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UserInfoMsg::clear_currentexp() {
  currentexp_ = 0;
  clear_has_currentexp();
}
inline ::google::protobuf::int32 UserInfoMsg::currentexp() const {
  return currentexp_;
}
inline void UserInfoMsg::set_currentexp(::google::protobuf::int32 value) {
  set_has_currentexp();
  currentexp_ = value;
}

// required int32 sex = 12;
inline bool UserInfoMsg::has_sex() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UserInfoMsg::set_has_sex() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UserInfoMsg::clear_has_sex() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UserInfoMsg::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 UserInfoMsg::sex() const {
  return sex_;
}
inline void UserInfoMsg::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// -------------------------------------------------------------------

// LoginMsg

// required int32 status = 1;
inline bool LoginMsg::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginMsg::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginMsg::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginMsg::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 LoginMsg::status() const {
  return status_;
}
inline void LoginMsg::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional .bullfight.UserInfoMsg userInfo = 2;
inline bool LoginMsg::has_userinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginMsg::set_has_userinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginMsg::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginMsg::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::bullfight::UserInfoMsg::Clear();
  clear_has_userinfo();
}
inline const ::bullfight::UserInfoMsg& LoginMsg::userinfo() const {
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::bullfight::UserInfoMsg* LoginMsg::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::bullfight::UserInfoMsg;
  return userinfo_;
}
inline ::bullfight::UserInfoMsg* LoginMsg::release_userinfo() {
  clear_has_userinfo();
  ::bullfight::UserInfoMsg* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void LoginMsg::set_allocated_userinfo(::bullfight::UserInfoMsg* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
}

// -------------------------------------------------------------------

// InitRoomRequest

// required int32 userID = 1;
inline bool InitRoomRequest::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InitRoomRequest::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InitRoomRequest::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InitRoomRequest::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 InitRoomRequest::userid() const {
  return userid_;
}
inline void InitRoomRequest::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// -------------------------------------------------------------------

// RoomInfoMsg

// required int32 roomID = 1;
inline bool RoomInfoMsg::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomInfoMsg::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomInfoMsg::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomInfoMsg::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 RoomInfoMsg::roomid() const {
  return roomid_;
}
inline void RoomInfoMsg::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// required int32 roomPNumber = 2;
inline bool RoomInfoMsg::has_roompnumber() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomInfoMsg::set_has_roompnumber() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomInfoMsg::clear_has_roompnumber() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomInfoMsg::clear_roompnumber() {
  roompnumber_ = 0;
  clear_has_roompnumber();
}
inline ::google::protobuf::int32 RoomInfoMsg::roompnumber() const {
  return roompnumber_;
}
inline void RoomInfoMsg::set_roompnumber(::google::protobuf::int32 value) {
  set_has_roompnumber();
  roompnumber_ = value;
}

// required int32 roomType = 3;
inline bool RoomInfoMsg::has_roomtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoomInfoMsg::set_has_roomtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoomInfoMsg::clear_has_roomtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoomInfoMsg::clear_roomtype() {
  roomtype_ = 0;
  clear_has_roomtype();
}
inline ::google::protobuf::int32 RoomInfoMsg::roomtype() const {
  return roomtype_;
}
inline void RoomInfoMsg::set_roomtype(::google::protobuf::int32 value) {
  set_has_roomtype();
  roomtype_ = value;
}

// required int32 roomLimitType = 4;
inline bool RoomInfoMsg::has_roomlimittype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoomInfoMsg::set_has_roomlimittype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoomInfoMsg::clear_has_roomlimittype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoomInfoMsg::clear_roomlimittype() {
  roomlimittype_ = 0;
  clear_has_roomlimittype();
}
inline ::google::protobuf::int32 RoomInfoMsg::roomlimittype() const {
  return roomlimittype_;
}
inline void RoomInfoMsg::set_roomlimittype(::google::protobuf::int32 value) {
  set_has_roomlimittype();
  roomlimittype_ = value;
}

// required string roomDescribtion = 5;
inline bool RoomInfoMsg::has_roomdescribtion() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoomInfoMsg::set_has_roomdescribtion() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoomInfoMsg::clear_has_roomdescribtion() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoomInfoMsg::clear_roomdescribtion() {
  if (roomdescribtion_ != &::google::protobuf::internal::kEmptyString) {
    roomdescribtion_->clear();
  }
  clear_has_roomdescribtion();
}
inline const ::std::string& RoomInfoMsg::roomdescribtion() const {
  return *roomdescribtion_;
}
inline void RoomInfoMsg::set_roomdescribtion(const ::std::string& value) {
  set_has_roomdescribtion();
  if (roomdescribtion_ == &::google::protobuf::internal::kEmptyString) {
    roomdescribtion_ = new ::std::string;
  }
  roomdescribtion_->assign(value);
}
inline void RoomInfoMsg::set_roomdescribtion(const char* value) {
  set_has_roomdescribtion();
  if (roomdescribtion_ == &::google::protobuf::internal::kEmptyString) {
    roomdescribtion_ = new ::std::string;
  }
  roomdescribtion_->assign(value);
}
inline void RoomInfoMsg::set_roomdescribtion(const char* value, size_t size) {
  set_has_roomdescribtion();
  if (roomdescribtion_ == &::google::protobuf::internal::kEmptyString) {
    roomdescribtion_ = new ::std::string;
  }
  roomdescribtion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RoomInfoMsg::mutable_roomdescribtion() {
  set_has_roomdescribtion();
  if (roomdescribtion_ == &::google::protobuf::internal::kEmptyString) {
    roomdescribtion_ = new ::std::string;
  }
  return roomdescribtion_;
}
inline ::std::string* RoomInfoMsg::release_roomdescribtion() {
  clear_has_roomdescribtion();
  if (roomdescribtion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = roomdescribtion_;
    roomdescribtion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RoomInfoMsg::set_allocated_roomdescribtion(::std::string* roomdescribtion) {
  if (roomdescribtion_ != &::google::protobuf::internal::kEmptyString) {
    delete roomdescribtion_;
  }
  if (roomdescribtion) {
    set_has_roomdescribtion();
    roomdescribtion_ = roomdescribtion;
  } else {
    clear_has_roomdescribtion();
    roomdescribtion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RoomListInfoMsg

// repeated .bullfight.RoomInfoMsg roomInfo = 1;
inline int RoomListInfoMsg::roominfo_size() const {
  return roominfo_.size();
}
inline void RoomListInfoMsg::clear_roominfo() {
  roominfo_.Clear();
}
inline const ::bullfight::RoomInfoMsg& RoomListInfoMsg::roominfo(int index) const {
  return roominfo_.Get(index);
}
inline ::bullfight::RoomInfoMsg* RoomListInfoMsg::mutable_roominfo(int index) {
  return roominfo_.Mutable(index);
}
inline ::bullfight::RoomInfoMsg* RoomListInfoMsg::add_roominfo() {
  return roominfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bullfight::RoomInfoMsg >&
RoomListInfoMsg::roominfo() const {
  return roominfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::bullfight::RoomInfoMsg >*
RoomListInfoMsg::mutable_roominfo() {
  return &roominfo_;
}

// -------------------------------------------------------------------

// InitRoomMsg

// required int32 status = 1;
inline bool InitRoomMsg::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InitRoomMsg::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InitRoomMsg::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InitRoomMsg::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 InitRoomMsg::status() const {
  return status_;
}
inline void InitRoomMsg::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// required int32 userID = 2;
inline bool InitRoomMsg::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InitRoomMsg::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InitRoomMsg::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InitRoomMsg::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 InitRoomMsg::userid() const {
  return userid_;
}
inline void InitRoomMsg::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional .bullfight.RoomListInfoMsg roomListInfo = 3;
inline bool InitRoomMsg::has_roomlistinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InitRoomMsg::set_has_roomlistinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InitRoomMsg::clear_has_roomlistinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InitRoomMsg::clear_roomlistinfo() {
  if (roomlistinfo_ != NULL) roomlistinfo_->::bullfight::RoomListInfoMsg::Clear();
  clear_has_roomlistinfo();
}
inline const ::bullfight::RoomListInfoMsg& InitRoomMsg::roomlistinfo() const {
  return roomlistinfo_ != NULL ? *roomlistinfo_ : *default_instance_->roomlistinfo_;
}
inline ::bullfight::RoomListInfoMsg* InitRoomMsg::mutable_roomlistinfo() {
  set_has_roomlistinfo();
  if (roomlistinfo_ == NULL) roomlistinfo_ = new ::bullfight::RoomListInfoMsg;
  return roomlistinfo_;
}
inline ::bullfight::RoomListInfoMsg* InitRoomMsg::release_roomlistinfo() {
  clear_has_roomlistinfo();
  ::bullfight::RoomListInfoMsg* temp = roomlistinfo_;
  roomlistinfo_ = NULL;
  return temp;
}
inline void InitRoomMsg::set_allocated_roomlistinfo(::bullfight::RoomListInfoMsg* roomlistinfo) {
  delete roomlistinfo_;
  roomlistinfo_ = roomlistinfo;
  if (roomlistinfo) {
    set_has_roomlistinfo();
  } else {
    clear_has_roomlistinfo();
  }
}

// -------------------------------------------------------------------

// RegisterRequest

// required string username = 1;
inline bool RegisterRequest::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterRequest::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterRequest::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& RegisterRequest::username() const {
  return *username_;
}
inline void RegisterRequest::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void RegisterRequest::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void RegisterRequest::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegisterRequest::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* RegisterRequest::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegisterRequest::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string passwd = 2;
inline bool RegisterRequest::has_passwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegisterRequest::set_has_passwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegisterRequest::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegisterRequest::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& RegisterRequest::passwd() const {
  return *passwd_;
}
inline void RegisterRequest::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
}
inline void RegisterRequest::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
}
inline void RegisterRequest::set_passwd(const char* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegisterRequest::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  return passwd_;
}
inline ::std::string* RegisterRequest::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegisterRequest::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string nickname = 3;
inline bool RegisterRequest::has_nickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegisterRequest::set_has_nickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegisterRequest::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegisterRequest::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& RegisterRequest::nickname() const {
  return *nickname_;
}
inline void RegisterRequest::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void RegisterRequest::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void RegisterRequest::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegisterRequest::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* RegisterRequest::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegisterRequest::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RegisterMsg

// required int32 status = 1;
inline bool RegisterMsg::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterMsg::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterMsg::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterMsg::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 RegisterMsg::status() const {
  return status_;
}
inline void RegisterMsg::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional .bullfight.UserInfoMsg userInfo = 2;
inline bool RegisterMsg::has_userinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegisterMsg::set_has_userinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegisterMsg::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegisterMsg::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::bullfight::UserInfoMsg::Clear();
  clear_has_userinfo();
}
inline const ::bullfight::UserInfoMsg& RegisterMsg::userinfo() const {
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::bullfight::UserInfoMsg* RegisterMsg::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::bullfight::UserInfoMsg;
  return userinfo_;
}
inline ::bullfight::UserInfoMsg* RegisterMsg::release_userinfo() {
  clear_has_userinfo();
  ::bullfight::UserInfoMsg* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void RegisterMsg::set_allocated_userinfo(::bullfight::UserInfoMsg* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
}

// -------------------------------------------------------------------

// RefreshRequest

// required int32 userID = 1;
inline bool RefreshRequest::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RefreshRequest::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RefreshRequest::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RefreshRequest::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 RefreshRequest::userid() const {
  return userid_;
}
inline void RefreshRequest::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// -------------------------------------------------------------------

// RefreshBackMsg

// required int32 status = 1;
inline bool RefreshBackMsg::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RefreshBackMsg::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RefreshBackMsg::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RefreshBackMsg::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 RefreshBackMsg::status() const {
  return status_;
}
inline void RefreshBackMsg::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// required int32 userID = 2;
inline bool RefreshBackMsg::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RefreshBackMsg::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RefreshBackMsg::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RefreshBackMsg::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 RefreshBackMsg::userid() const {
  return userid_;
}
inline void RefreshBackMsg::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// required .bullfight.UserInfoMsg userInfo = 3;
inline bool RefreshBackMsg::has_userinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RefreshBackMsg::set_has_userinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RefreshBackMsg::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RefreshBackMsg::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::bullfight::UserInfoMsg::Clear();
  clear_has_userinfo();
}
inline const ::bullfight::UserInfoMsg& RefreshBackMsg::userinfo() const {
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::bullfight::UserInfoMsg* RefreshBackMsg::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::bullfight::UserInfoMsg;
  return userinfo_;
}
inline ::bullfight::UserInfoMsg* RefreshBackMsg::release_userinfo() {
  clear_has_userinfo();
  ::bullfight::UserInfoMsg* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void RefreshBackMsg::set_allocated_userinfo(::bullfight::UserInfoMsg* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
}

// optional .bullfight.RoomListInfoMsg roomListInfo = 4;
inline bool RefreshBackMsg::has_roomlistinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RefreshBackMsg::set_has_roomlistinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RefreshBackMsg::clear_has_roomlistinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RefreshBackMsg::clear_roomlistinfo() {
  if (roomlistinfo_ != NULL) roomlistinfo_->::bullfight::RoomListInfoMsg::Clear();
  clear_has_roomlistinfo();
}
inline const ::bullfight::RoomListInfoMsg& RefreshBackMsg::roomlistinfo() const {
  return roomlistinfo_ != NULL ? *roomlistinfo_ : *default_instance_->roomlistinfo_;
}
inline ::bullfight::RoomListInfoMsg* RefreshBackMsg::mutable_roomlistinfo() {
  set_has_roomlistinfo();
  if (roomlistinfo_ == NULL) roomlistinfo_ = new ::bullfight::RoomListInfoMsg;
  return roomlistinfo_;
}
inline ::bullfight::RoomListInfoMsg* RefreshBackMsg::release_roomlistinfo() {
  clear_has_roomlistinfo();
  ::bullfight::RoomListInfoMsg* temp = roomlistinfo_;
  roomlistinfo_ = NULL;
  return temp;
}
inline void RefreshBackMsg::set_allocated_roomlistinfo(::bullfight::RoomListInfoMsg* roomlistinfo) {
  delete roomlistinfo_;
  roomlistinfo_ = roomlistinfo;
  if (roomlistinfo) {
    set_has_roomlistinfo();
  } else {
    clear_has_roomlistinfo();
  }
}

// -------------------------------------------------------------------

// EnterRoomRequest

// required int32 roomID = 1;
inline bool EnterRoomRequest::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnterRoomRequest::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnterRoomRequest::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnterRoomRequest::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 EnterRoomRequest::roomid() const {
  return roomid_;
}
inline void EnterRoomRequest::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// required int32 userID = 2;
inline bool EnterRoomRequest::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnterRoomRequest::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnterRoomRequest::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnterRoomRequest::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 EnterRoomRequest::userid() const {
  return userid_;
}
inline void EnterRoomRequest::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// -------------------------------------------------------------------

// PlayerInfoMsg

// required int32 playerID = 1;
inline bool PlayerInfoMsg::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerInfoMsg::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerInfoMsg::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerInfoMsg::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 PlayerInfoMsg::playerid() const {
  return playerid_;
}
inline void PlayerInfoMsg::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required int32 playerMoney = 2;
inline bool PlayerInfoMsg::has_playermoney() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerInfoMsg::set_has_playermoney() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerInfoMsg::clear_has_playermoney() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerInfoMsg::clear_playermoney() {
  playermoney_ = 0;
  clear_has_playermoney();
}
inline ::google::protobuf::int32 PlayerInfoMsg::playermoney() const {
  return playermoney_;
}
inline void PlayerInfoMsg::set_playermoney(::google::protobuf::int32 value) {
  set_has_playermoney();
  playermoney_ = value;
}

// required int32 playerDiamond = 3;
inline bool PlayerInfoMsg::has_playerdiamond() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerInfoMsg::set_has_playerdiamond() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerInfoMsg::clear_has_playerdiamond() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerInfoMsg::clear_playerdiamond() {
  playerdiamond_ = 0;
  clear_has_playerdiamond();
}
inline ::google::protobuf::int32 PlayerInfoMsg::playerdiamond() const {
  return playerdiamond_;
}
inline void PlayerInfoMsg::set_playerdiamond(::google::protobuf::int32 value) {
  set_has_playerdiamond();
  playerdiamond_ = value;
}

// required string playerNickName = 4;
inline bool PlayerInfoMsg::has_playernickname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerInfoMsg::set_has_playernickname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerInfoMsg::clear_has_playernickname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerInfoMsg::clear_playernickname() {
  if (playernickname_ != &::google::protobuf::internal::kEmptyString) {
    playernickname_->clear();
  }
  clear_has_playernickname();
}
inline const ::std::string& PlayerInfoMsg::playernickname() const {
  return *playernickname_;
}
inline void PlayerInfoMsg::set_playernickname(const ::std::string& value) {
  set_has_playernickname();
  if (playernickname_ == &::google::protobuf::internal::kEmptyString) {
    playernickname_ = new ::std::string;
  }
  playernickname_->assign(value);
}
inline void PlayerInfoMsg::set_playernickname(const char* value) {
  set_has_playernickname();
  if (playernickname_ == &::google::protobuf::internal::kEmptyString) {
    playernickname_ = new ::std::string;
  }
  playernickname_->assign(value);
}
inline void PlayerInfoMsg::set_playernickname(const char* value, size_t size) {
  set_has_playernickname();
  if (playernickname_ == &::google::protobuf::internal::kEmptyString) {
    playernickname_ = new ::std::string;
  }
  playernickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerInfoMsg::mutable_playernickname() {
  set_has_playernickname();
  if (playernickname_ == &::google::protobuf::internal::kEmptyString) {
    playernickname_ = new ::std::string;
  }
  return playernickname_;
}
inline ::std::string* PlayerInfoMsg::release_playernickname() {
  clear_has_playernickname();
  if (playernickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playernickname_;
    playernickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerInfoMsg::set_allocated_playernickname(::std::string* playernickname) {
  if (playernickname_ != &::google::protobuf::internal::kEmptyString) {
    delete playernickname_;
  }
  if (playernickname) {
    set_has_playernickname();
    playernickname_ = playernickname;
  } else {
    clear_has_playernickname();
    playernickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 playerLevel = 5;
inline bool PlayerInfoMsg::has_playerlevel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerInfoMsg::set_has_playerlevel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerInfoMsg::clear_has_playerlevel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerInfoMsg::clear_playerlevel() {
  playerlevel_ = 0;
  clear_has_playerlevel();
}
inline ::google::protobuf::int32 PlayerInfoMsg::playerlevel() const {
  return playerlevel_;
}
inline void PlayerInfoMsg::set_playerlevel(::google::protobuf::int32 value) {
  set_has_playerlevel();
  playerlevel_ = value;
}

// required int32 currentExp = 6;
inline bool PlayerInfoMsg::has_currentexp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerInfoMsg::set_has_currentexp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerInfoMsg::clear_has_currentexp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerInfoMsg::clear_currentexp() {
  currentexp_ = 0;
  clear_has_currentexp();
}
inline ::google::protobuf::int32 PlayerInfoMsg::currentexp() const {
  return currentexp_;
}
inline void PlayerInfoMsg::set_currentexp(::google::protobuf::int32 value) {
  set_has_currentexp();
  currentexp_ = value;
}

// required int32 battleLevel = 7;
inline bool PlayerInfoMsg::has_battlelevel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerInfoMsg::set_has_battlelevel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerInfoMsg::clear_has_battlelevel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerInfoMsg::clear_battlelevel() {
  battlelevel_ = 0;
  clear_has_battlelevel();
}
inline ::google::protobuf::int32 PlayerInfoMsg::battlelevel() const {
  return battlelevel_;
}
inline void PlayerInfoMsg::set_battlelevel(::google::protobuf::int32 value) {
  set_has_battlelevel();
  battlelevel_ = value;
}

// required int32 playerGlamour = 8;
inline bool PlayerInfoMsg::has_playerglamour() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerInfoMsg::set_has_playerglamour() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerInfoMsg::clear_has_playerglamour() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerInfoMsg::clear_playerglamour() {
  playerglamour_ = 0;
  clear_has_playerglamour();
}
inline ::google::protobuf::int32 PlayerInfoMsg::playerglamour() const {
  return playerglamour_;
}
inline void PlayerInfoMsg::set_playerglamour(::google::protobuf::int32 value) {
  set_has_playerglamour();
  playerglamour_ = value;
}

// required int32 playerFaceType = 9;
inline bool PlayerInfoMsg::has_playerfacetype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerInfoMsg::set_has_playerfacetype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayerInfoMsg::clear_has_playerfacetype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayerInfoMsg::clear_playerfacetype() {
  playerfacetype_ = 0;
  clear_has_playerfacetype();
}
inline ::google::protobuf::int32 PlayerInfoMsg::playerfacetype() const {
  return playerfacetype_;
}
inline void PlayerInfoMsg::set_playerfacetype(::google::protobuf::int32 value) {
  set_has_playerfacetype();
  playerfacetype_ = value;
}

// required int32 playerVIPLevel = 10;
inline bool PlayerInfoMsg::has_playerviplevel() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlayerInfoMsg::set_has_playerviplevel() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlayerInfoMsg::clear_has_playerviplevel() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlayerInfoMsg::clear_playerviplevel() {
  playerviplevel_ = 0;
  clear_has_playerviplevel();
}
inline ::google::protobuf::int32 PlayerInfoMsg::playerviplevel() const {
  return playerviplevel_;
}
inline void PlayerInfoMsg::set_playerviplevel(::google::protobuf::int32 value) {
  set_has_playerviplevel();
  playerviplevel_ = value;
}

// optional bool hasFamily = 11 [default = false];
inline bool PlayerInfoMsg::has_hasfamily() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlayerInfoMsg::set_has_hasfamily() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PlayerInfoMsg::clear_has_hasfamily() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PlayerInfoMsg::clear_hasfamily() {
  hasfamily_ = false;
  clear_has_hasfamily();
}
inline bool PlayerInfoMsg::hasfamily() const {
  return hasfamily_;
}
inline void PlayerInfoMsg::set_hasfamily(bool value) {
  set_has_hasfamily();
  hasfamily_ = value;
}

// optional string playerFamily = 12 [default = ""];
inline bool PlayerInfoMsg::has_playerfamily() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PlayerInfoMsg::set_has_playerfamily() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PlayerInfoMsg::clear_has_playerfamily() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PlayerInfoMsg::clear_playerfamily() {
  if (playerfamily_ != &::google::protobuf::internal::kEmptyString) {
    playerfamily_->clear();
  }
  clear_has_playerfamily();
}
inline const ::std::string& PlayerInfoMsg::playerfamily() const {
  return *playerfamily_;
}
inline void PlayerInfoMsg::set_playerfamily(const ::std::string& value) {
  set_has_playerfamily();
  if (playerfamily_ == &::google::protobuf::internal::kEmptyString) {
    playerfamily_ = new ::std::string;
  }
  playerfamily_->assign(value);
}
inline void PlayerInfoMsg::set_playerfamily(const char* value) {
  set_has_playerfamily();
  if (playerfamily_ == &::google::protobuf::internal::kEmptyString) {
    playerfamily_ = new ::std::string;
  }
  playerfamily_->assign(value);
}
inline void PlayerInfoMsg::set_playerfamily(const char* value, size_t size) {
  set_has_playerfamily();
  if (playerfamily_ == &::google::protobuf::internal::kEmptyString) {
    playerfamily_ = new ::std::string;
  }
  playerfamily_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerInfoMsg::mutable_playerfamily() {
  set_has_playerfamily();
  if (playerfamily_ == &::google::protobuf::internal::kEmptyString) {
    playerfamily_ = new ::std::string;
  }
  return playerfamily_;
}
inline ::std::string* PlayerInfoMsg::release_playerfamily() {
  clear_has_playerfamily();
  if (playerfamily_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playerfamily_;
    playerfamily_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerInfoMsg::set_allocated_playerfamily(::std::string* playerfamily) {
  if (playerfamily_ != &::google::protobuf::internal::kEmptyString) {
    delete playerfamily_;
  }
  if (playerfamily) {
    set_has_playerfamily();
    playerfamily_ = playerfamily;
  } else {
    clear_has_playerfamily();
    playerfamily_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PokerMsg

// required int32 roomID = 1;
inline bool PokerMsg::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PokerMsg::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PokerMsg::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PokerMsg::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 PokerMsg::roomid() const {
  return roomid_;
}
inline void PokerMsg::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// repeated int32 pokerValue = 2;
inline int PokerMsg::pokervalue_size() const {
  return pokervalue_.size();
}
inline void PokerMsg::clear_pokervalue() {
  pokervalue_.Clear();
}
inline ::google::protobuf::int32 PokerMsg::pokervalue(int index) const {
  return pokervalue_.Get(index);
}
inline void PokerMsg::set_pokervalue(int index, ::google::protobuf::int32 value) {
  pokervalue_.Set(index, value);
}
inline void PokerMsg::add_pokervalue(::google::protobuf::int32 value) {
  pokervalue_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PokerMsg::pokervalue() const {
  return pokervalue_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PokerMsg::mutable_pokervalue() {
  return &pokervalue_;
}

// -------------------------------------------------------------------

// RoomBetEndMsg

// required int32 roomID = 1;
inline bool RoomBetEndMsg::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomBetEndMsg::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomBetEndMsg::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomBetEndMsg::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 RoomBetEndMsg::roomid() const {
  return roomid_;
}
inline void RoomBetEndMsg::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// required int32 bankerWinMoney = 2;
inline bool RoomBetEndMsg::has_bankerwinmoney() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomBetEndMsg::set_has_bankerwinmoney() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomBetEndMsg::clear_has_bankerwinmoney() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomBetEndMsg::clear_bankerwinmoney() {
  bankerwinmoney_ = 0;
  clear_has_bankerwinmoney();
}
inline ::google::protobuf::int32 RoomBetEndMsg::bankerwinmoney() const {
  return bankerwinmoney_;
}
inline void RoomBetEndMsg::set_bankerwinmoney(::google::protobuf::int32 value) {
  set_has_bankerwinmoney();
  bankerwinmoney_ = value;
}

// required int32 playerWinMoney = 3;
inline bool RoomBetEndMsg::has_playerwinmoney() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoomBetEndMsg::set_has_playerwinmoney() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoomBetEndMsg::clear_has_playerwinmoney() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoomBetEndMsg::clear_playerwinmoney() {
  playerwinmoney_ = 0;
  clear_has_playerwinmoney();
}
inline ::google::protobuf::int32 RoomBetEndMsg::playerwinmoney() const {
  return playerwinmoney_;
}
inline void RoomBetEndMsg::set_playerwinmoney(::google::protobuf::int32 value) {
  set_has_playerwinmoney();
  playerwinmoney_ = value;
}

// repeated int32 playerBetWinMoney = 4;
inline int RoomBetEndMsg::playerbetwinmoney_size() const {
  return playerbetwinmoney_.size();
}
inline void RoomBetEndMsg::clear_playerbetwinmoney() {
  playerbetwinmoney_.Clear();
}
inline ::google::protobuf::int32 RoomBetEndMsg::playerbetwinmoney(int index) const {
  return playerbetwinmoney_.Get(index);
}
inline void RoomBetEndMsg::set_playerbetwinmoney(int index, ::google::protobuf::int32 value) {
  playerbetwinmoney_.Set(index, value);
}
inline void RoomBetEndMsg::add_playerbetwinmoney(::google::protobuf::int32 value) {
  playerbetwinmoney_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RoomBetEndMsg::playerbetwinmoney() const {
  return playerbetwinmoney_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RoomBetEndMsg::mutable_playerbetwinmoney() {
  return &playerbetwinmoney_;
}

// optional bool bIsBanker = 5 [default = false];
inline bool RoomBetEndMsg::has_bisbanker() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoomBetEndMsg::set_has_bisbanker() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoomBetEndMsg::clear_has_bisbanker() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoomBetEndMsg::clear_bisbanker() {
  bisbanker_ = false;
  clear_has_bisbanker();
}
inline bool RoomBetEndMsg::bisbanker() const {
  return bisbanker_;
}
inline void RoomBetEndMsg::set_bisbanker(bool value) {
  set_has_bisbanker();
  bisbanker_ = value;
}

// -------------------------------------------------------------------

// BankerRequest

// required int32 roomID = 1;
inline bool BankerRequest::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BankerRequest::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BankerRequest::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BankerRequest::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 BankerRequest::roomid() const {
  return roomid_;
}
inline void BankerRequest::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// required int32 playerID = 2;
inline bool BankerRequest::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BankerRequest::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BankerRequest::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BankerRequest::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 BankerRequest::playerid() const {
  return playerid_;
}
inline void BankerRequest::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// RoomBankerListMsg_Banker

// required int32 playerID = 1;
inline bool RoomBankerListMsg_Banker::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomBankerListMsg_Banker::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomBankerListMsg_Banker::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomBankerListMsg_Banker::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 RoomBankerListMsg_Banker::playerid() const {
  return playerid_;
}
inline void RoomBankerListMsg_Banker::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required int32 playerMoney = 2;
inline bool RoomBankerListMsg_Banker::has_playermoney() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomBankerListMsg_Banker::set_has_playermoney() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomBankerListMsg_Banker::clear_has_playermoney() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomBankerListMsg_Banker::clear_playermoney() {
  playermoney_ = 0;
  clear_has_playermoney();
}
inline ::google::protobuf::int32 RoomBankerListMsg_Banker::playermoney() const {
  return playermoney_;
}
inline void RoomBankerListMsg_Banker::set_playermoney(::google::protobuf::int32 value) {
  set_has_playermoney();
  playermoney_ = value;
}

// required string playerName = 3;
inline bool RoomBankerListMsg_Banker::has_playername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoomBankerListMsg_Banker::set_has_playername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoomBankerListMsg_Banker::clear_has_playername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoomBankerListMsg_Banker::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& RoomBankerListMsg_Banker::playername() const {
  return *playername_;
}
inline void RoomBankerListMsg_Banker::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void RoomBankerListMsg_Banker::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void RoomBankerListMsg_Banker::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RoomBankerListMsg_Banker::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* RoomBankerListMsg_Banker::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RoomBankerListMsg_Banker::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool isBanker = 4;
inline bool RoomBankerListMsg_Banker::has_isbanker() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoomBankerListMsg_Banker::set_has_isbanker() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoomBankerListMsg_Banker::clear_has_isbanker() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoomBankerListMsg_Banker::clear_isbanker() {
  isbanker_ = false;
  clear_has_isbanker();
}
inline bool RoomBankerListMsg_Banker::isbanker() const {
  return isbanker_;
}
inline void RoomBankerListMsg_Banker::set_isbanker(bool value) {
  set_has_isbanker();
  isbanker_ = value;
}

// -------------------------------------------------------------------

// RoomBankerListMsg

// required int32 roomID = 1;
inline bool RoomBankerListMsg::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomBankerListMsg::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomBankerListMsg::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomBankerListMsg::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 RoomBankerListMsg::roomid() const {
  return roomid_;
}
inline void RoomBankerListMsg::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// repeated .bullfight.RoomBankerListMsg.Banker bankerList = 2;
inline int RoomBankerListMsg::bankerlist_size() const {
  return bankerlist_.size();
}
inline void RoomBankerListMsg::clear_bankerlist() {
  bankerlist_.Clear();
}
inline const ::bullfight::RoomBankerListMsg_Banker& RoomBankerListMsg::bankerlist(int index) const {
  return bankerlist_.Get(index);
}
inline ::bullfight::RoomBankerListMsg_Banker* RoomBankerListMsg::mutable_bankerlist(int index) {
  return bankerlist_.Mutable(index);
}
inline ::bullfight::RoomBankerListMsg_Banker* RoomBankerListMsg::add_bankerlist() {
  return bankerlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bullfight::RoomBankerListMsg_Banker >&
RoomBankerListMsg::bankerlist() const {
  return bankerlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::bullfight::RoomBankerListMsg_Banker >*
RoomBankerListMsg::mutable_bankerlist() {
  return &bankerlist_;
}

// -------------------------------------------------------------------

// RoomStatusMsg

// required int32 roomID = 1;
inline bool RoomStatusMsg::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomStatusMsg::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomStatusMsg::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomStatusMsg::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 RoomStatusMsg::roomid() const {
  return roomid_;
}
inline void RoomStatusMsg::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// required int32 playerID = 2;
inline bool RoomStatusMsg::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomStatusMsg::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomStatusMsg::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomStatusMsg::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 RoomStatusMsg::playerid() const {
  return playerid_;
}
inline void RoomStatusMsg::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required bool enterValid = 3;
inline bool RoomStatusMsg::has_entervalid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoomStatusMsg::set_has_entervalid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoomStatusMsg::clear_has_entervalid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoomStatusMsg::clear_entervalid() {
  entervalid_ = false;
  clear_has_entervalid();
}
inline bool RoomStatusMsg::entervalid() const {
  return entervalid_;
}
inline void RoomStatusMsg::set_entervalid(bool value) {
  set_has_entervalid();
  entervalid_ = value;
}

// optional int32 currentStatus = 4 [default = 0];
inline bool RoomStatusMsg::has_currentstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoomStatusMsg::set_has_currentstatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoomStatusMsg::clear_has_currentstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoomStatusMsg::clear_currentstatus() {
  currentstatus_ = 0;
  clear_has_currentstatus();
}
inline ::google::protobuf::int32 RoomStatusMsg::currentstatus() const {
  return currentstatus_;
}
inline void RoomStatusMsg::set_currentstatus(::google::protobuf::int32 value) {
  set_has_currentstatus();
  currentstatus_ = value;
}

// optional int32 currentTime = 5 [default = 0];
inline bool RoomStatusMsg::has_currenttime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoomStatusMsg::set_has_currenttime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoomStatusMsg::clear_has_currenttime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoomStatusMsg::clear_currenttime() {
  currenttime_ = 0;
  clear_has_currenttime();
}
inline ::google::protobuf::int32 RoomStatusMsg::currenttime() const {
  return currenttime_;
}
inline void RoomStatusMsg::set_currenttime(::google::protobuf::int32 value) {
  set_has_currenttime();
  currenttime_ = value;
}

// optional bool bHasBanker = 6 [default = false];
inline bool RoomStatusMsg::has_bhasbanker() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoomStatusMsg::set_has_bhasbanker() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RoomStatusMsg::clear_has_bhasbanker() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RoomStatusMsg::clear_bhasbanker() {
  bhasbanker_ = false;
  clear_has_bhasbanker();
}
inline bool RoomStatusMsg::bhasbanker() const {
  return bhasbanker_;
}
inline void RoomStatusMsg::set_bhasbanker(bool value) {
  set_has_bhasbanker();
  bhasbanker_ = value;
}

// optional .bullfight.PokerMsg pokerSetMsg = 7;
inline bool RoomStatusMsg::has_pokersetmsg() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RoomStatusMsg::set_has_pokersetmsg() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RoomStatusMsg::clear_has_pokersetmsg() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RoomStatusMsg::clear_pokersetmsg() {
  if (pokersetmsg_ != NULL) pokersetmsg_->::bullfight::PokerMsg::Clear();
  clear_has_pokersetmsg();
}
inline const ::bullfight::PokerMsg& RoomStatusMsg::pokersetmsg() const {
  return pokersetmsg_ != NULL ? *pokersetmsg_ : *default_instance_->pokersetmsg_;
}
inline ::bullfight::PokerMsg* RoomStatusMsg::mutable_pokersetmsg() {
  set_has_pokersetmsg();
  if (pokersetmsg_ == NULL) pokersetmsg_ = new ::bullfight::PokerMsg;
  return pokersetmsg_;
}
inline ::bullfight::PokerMsg* RoomStatusMsg::release_pokersetmsg() {
  clear_has_pokersetmsg();
  ::bullfight::PokerMsg* temp = pokersetmsg_;
  pokersetmsg_ = NULL;
  return temp;
}
inline void RoomStatusMsg::set_allocated_pokersetmsg(::bullfight::PokerMsg* pokersetmsg) {
  delete pokersetmsg_;
  pokersetmsg_ = pokersetmsg;
  if (pokersetmsg) {
    set_has_pokersetmsg();
  } else {
    clear_has_pokersetmsg();
  }
}

// optional .bullfight.RoomBetEndMsg endMsg = 8;
inline bool RoomStatusMsg::has_endmsg() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RoomStatusMsg::set_has_endmsg() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RoomStatusMsg::clear_has_endmsg() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RoomStatusMsg::clear_endmsg() {
  if (endmsg_ != NULL) endmsg_->::bullfight::RoomBetEndMsg::Clear();
  clear_has_endmsg();
}
inline const ::bullfight::RoomBetEndMsg& RoomStatusMsg::endmsg() const {
  return endmsg_ != NULL ? *endmsg_ : *default_instance_->endmsg_;
}
inline ::bullfight::RoomBetEndMsg* RoomStatusMsg::mutable_endmsg() {
  set_has_endmsg();
  if (endmsg_ == NULL) endmsg_ = new ::bullfight::RoomBetEndMsg;
  return endmsg_;
}
inline ::bullfight::RoomBetEndMsg* RoomStatusMsg::release_endmsg() {
  clear_has_endmsg();
  ::bullfight::RoomBetEndMsg* temp = endmsg_;
  endmsg_ = NULL;
  return temp;
}
inline void RoomStatusMsg::set_allocated_endmsg(::bullfight::RoomBetEndMsg* endmsg) {
  delete endmsg_;
  endmsg_ = endmsg;
  if (endmsg) {
    set_has_endmsg();
  } else {
    clear_has_endmsg();
  }
}

// repeated .bullfight.PlayerInfoMsg playerList = 9;
inline int RoomStatusMsg::playerlist_size() const {
  return playerlist_.size();
}
inline void RoomStatusMsg::clear_playerlist() {
  playerlist_.Clear();
}
inline const ::bullfight::PlayerInfoMsg& RoomStatusMsg::playerlist(int index) const {
  return playerlist_.Get(index);
}
inline ::bullfight::PlayerInfoMsg* RoomStatusMsg::mutable_playerlist(int index) {
  return playerlist_.Mutable(index);
}
inline ::bullfight::PlayerInfoMsg* RoomStatusMsg::add_playerlist() {
  return playerlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bullfight::PlayerInfoMsg >&
RoomStatusMsg::playerlist() const {
  return playerlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::bullfight::PlayerInfoMsg >*
RoomStatusMsg::mutable_playerlist() {
  return &playerlist_;
}

// optional .bullfight.RoomBankerListMsg bankerList = 10;
inline bool RoomStatusMsg::has_bankerlist() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RoomStatusMsg::set_has_bankerlist() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RoomStatusMsg::clear_has_bankerlist() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RoomStatusMsg::clear_bankerlist() {
  if (bankerlist_ != NULL) bankerlist_->::bullfight::RoomBankerListMsg::Clear();
  clear_has_bankerlist();
}
inline const ::bullfight::RoomBankerListMsg& RoomStatusMsg::bankerlist() const {
  return bankerlist_ != NULL ? *bankerlist_ : *default_instance_->bankerlist_;
}
inline ::bullfight::RoomBankerListMsg* RoomStatusMsg::mutable_bankerlist() {
  set_has_bankerlist();
  if (bankerlist_ == NULL) bankerlist_ = new ::bullfight::RoomBankerListMsg;
  return bankerlist_;
}
inline ::bullfight::RoomBankerListMsg* RoomStatusMsg::release_bankerlist() {
  clear_has_bankerlist();
  ::bullfight::RoomBankerListMsg* temp = bankerlist_;
  bankerlist_ = NULL;
  return temp;
}
inline void RoomStatusMsg::set_allocated_bankerlist(::bullfight::RoomBankerListMsg* bankerlist) {
  delete bankerlist_;
  bankerlist_ = bankerlist;
  if (bankerlist) {
    set_has_bankerlist();
  } else {
    clear_has_bankerlist();
  }
}

// required int32 status = 11;
inline bool RoomStatusMsg::has_status() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RoomStatusMsg::set_has_status() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RoomStatusMsg::clear_has_status() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RoomStatusMsg::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 RoomStatusMsg::status() const {
  return status_;
}
inline void RoomStatusMsg::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// RoomBetMsg

// required int32 roomID = 1;
inline bool RoomBetMsg::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomBetMsg::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomBetMsg::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomBetMsg::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 RoomBetMsg::roomid() const {
  return roomid_;
}
inline void RoomBetMsg::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// required int32 playerID = 2;
inline bool RoomBetMsg::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomBetMsg::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomBetMsg::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomBetMsg::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 RoomBetMsg::playerid() const {
  return playerid_;
}
inline void RoomBetMsg::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required int32 betMoney = 3;
inline bool RoomBetMsg::has_betmoney() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoomBetMsg::set_has_betmoney() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoomBetMsg::clear_has_betmoney() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoomBetMsg::clear_betmoney() {
  betmoney_ = 0;
  clear_has_betmoney();
}
inline ::google::protobuf::int32 RoomBetMsg::betmoney() const {
  return betmoney_;
}
inline void RoomBetMsg::set_betmoney(::google::protobuf::int32 value) {
  set_has_betmoney();
  betmoney_ = value;
}

// required int32 betID = 4;
inline bool RoomBetMsg::has_betid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoomBetMsg::set_has_betid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoomBetMsg::clear_has_betid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoomBetMsg::clear_betid() {
  betid_ = 0;
  clear_has_betid();
}
inline ::google::protobuf::int32 RoomBetMsg::betid() const {
  return betid_;
}
inline void RoomBetMsg::set_betid(::google::protobuf::int32 value) {
  set_has_betid();
  betid_ = value;
}

// -------------------------------------------------------------------

// RoomBetTotalMsg

// required int32 roomID = 1;
inline bool RoomBetTotalMsg::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomBetTotalMsg::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomBetTotalMsg::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomBetTotalMsg::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 RoomBetTotalMsg::roomid() const {
  return roomid_;
}
inline void RoomBetTotalMsg::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// optional int32 playerID = 2 [default = 0];
inline bool RoomBetTotalMsg::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomBetTotalMsg::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomBetTotalMsg::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomBetTotalMsg::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 RoomBetTotalMsg::playerid() const {
  return playerid_;
}
inline void RoomBetTotalMsg::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional bool isBetted = 3 [default = false];
inline bool RoomBetTotalMsg::has_isbetted() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoomBetTotalMsg::set_has_isbetted() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoomBetTotalMsg::clear_has_isbetted() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoomBetTotalMsg::clear_isbetted() {
  isbetted_ = false;
  clear_has_isbetted();
}
inline bool RoomBetTotalMsg::isbetted() const {
  return isbetted_;
}
inline void RoomBetTotalMsg::set_isbetted(bool value) {
  set_has_isbetted();
  isbetted_ = value;
}

// optional bool isValid = 4 [default = false];
inline bool RoomBetTotalMsg::has_isvalid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoomBetTotalMsg::set_has_isvalid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoomBetTotalMsg::clear_has_isvalid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoomBetTotalMsg::clear_isvalid() {
  isvalid_ = false;
  clear_has_isvalid();
}
inline bool RoomBetTotalMsg::isvalid() const {
  return isvalid_;
}
inline void RoomBetTotalMsg::set_isvalid(bool value) {
  set_has_isvalid();
  isvalid_ = value;
}

// optional int32 betID = 5 [default = 0];
inline bool RoomBetTotalMsg::has_betid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoomBetTotalMsg::set_has_betid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoomBetTotalMsg::clear_has_betid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoomBetTotalMsg::clear_betid() {
  betid_ = 0;
  clear_has_betid();
}
inline ::google::protobuf::int32 RoomBetTotalMsg::betid() const {
  return betid_;
}
inline void RoomBetTotalMsg::set_betid(::google::protobuf::int32 value) {
  set_has_betid();
  betid_ = value;
}

// optional int32 betMoney = 6 [default = 0];
inline bool RoomBetTotalMsg::has_betmoney() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoomBetTotalMsg::set_has_betmoney() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RoomBetTotalMsg::clear_has_betmoney() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RoomBetTotalMsg::clear_betmoney() {
  betmoney_ = 0;
  clear_has_betmoney();
}
inline ::google::protobuf::int32 RoomBetTotalMsg::betmoney() const {
  return betmoney_;
}
inline void RoomBetTotalMsg::set_betmoney(::google::protobuf::int32 value) {
  set_has_betmoney();
  betmoney_ = value;
}

// repeated int32 totalBetMoney = 7;
inline int RoomBetTotalMsg::totalbetmoney_size() const {
  return totalbetmoney_.size();
}
inline void RoomBetTotalMsg::clear_totalbetmoney() {
  totalbetmoney_.Clear();
}
inline ::google::protobuf::int32 RoomBetTotalMsg::totalbetmoney(int index) const {
  return totalbetmoney_.Get(index);
}
inline void RoomBetTotalMsg::set_totalbetmoney(int index, ::google::protobuf::int32 value) {
  totalbetmoney_.Set(index, value);
}
inline void RoomBetTotalMsg::add_totalbetmoney(::google::protobuf::int32 value) {
  totalbetmoney_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RoomBetTotalMsg::totalbetmoney() const {
  return totalbetmoney_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RoomBetTotalMsg::mutable_totalbetmoney() {
  return &totalbetmoney_;
}

// -------------------------------------------------------------------

// RoomStatusTimeCfgRequest

// required int32 roomID = 1;
inline bool RoomStatusTimeCfgRequest::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomStatusTimeCfgRequest::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomStatusTimeCfgRequest::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomStatusTimeCfgRequest::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 RoomStatusTimeCfgRequest::roomid() const {
  return roomid_;
}
inline void RoomStatusTimeCfgRequest::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// required int32 userID = 2;
inline bool RoomStatusTimeCfgRequest::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomStatusTimeCfgRequest::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomStatusTimeCfgRequest::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomStatusTimeCfgRequest::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 RoomStatusTimeCfgRequest::userid() const {
  return userid_;
}
inline void RoomStatusTimeCfgRequest::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// -------------------------------------------------------------------

// RoomStatusTimeCfgMsg

// required int32 roomID = 1;
inline bool RoomStatusTimeCfgMsg::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomStatusTimeCfgMsg::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomStatusTimeCfgMsg::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomStatusTimeCfgMsg::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 RoomStatusTimeCfgMsg::roomid() const {
  return roomid_;
}
inline void RoomStatusTimeCfgMsg::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// required int32 currentStatus = 2;
inline bool RoomStatusTimeCfgMsg::has_currentstatus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomStatusTimeCfgMsg::set_has_currentstatus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomStatusTimeCfgMsg::clear_has_currentstatus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomStatusTimeCfgMsg::clear_currentstatus() {
  currentstatus_ = 0;
  clear_has_currentstatus();
}
inline ::google::protobuf::int32 RoomStatusTimeCfgMsg::currentstatus() const {
  return currentstatus_;
}
inline void RoomStatusTimeCfgMsg::set_currentstatus(::google::protobuf::int32 value) {
  set_has_currentstatus();
  currentstatus_ = value;
}

// required int32 currentTime = 3;
inline bool RoomStatusTimeCfgMsg::has_currenttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoomStatusTimeCfgMsg::set_has_currenttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoomStatusTimeCfgMsg::clear_has_currenttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoomStatusTimeCfgMsg::clear_currenttime() {
  currenttime_ = 0;
  clear_has_currenttime();
}
inline ::google::protobuf::int32 RoomStatusTimeCfgMsg::currenttime() const {
  return currenttime_;
}
inline void RoomStatusTimeCfgMsg::set_currenttime(::google::protobuf::int32 value) {
  set_has_currenttime();
  currenttime_ = value;
}

// -------------------------------------------------------------------

// ExitRoomMsg

// required int32 roomID = 1;
inline bool ExitRoomMsg::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExitRoomMsg::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExitRoomMsg::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExitRoomMsg::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 ExitRoomMsg::roomid() const {
  return roomid_;
}
inline void ExitRoomMsg::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// required int32 playerID = 2;
inline bool ExitRoomMsg::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExitRoomMsg::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExitRoomMsg::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExitRoomMsg::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 ExitRoomMsg::playerid() const {
  return playerid_;
}
inline void ExitRoomMsg::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace bullfight

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
